<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>agonzalezro.github.com</title><link href="http://agonzalezro.github.com/" rel="alternate"></link><link href="http://agonzalezro.github.com/feeds/all-en.atom.xml" rel="self"></link><id>http://agonzalezro.github.com/</id><updated>2013-05-13T00:00:00+02:00</updated><entry><title>Python and Scala smoke the peace pipe</title><link href="http://agonzalezro.github.com/python-and-scala-smoke-the-peace-pipe.html" rel="alternate"></link><updated>2013-05-13T00:00:00+02:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-05-13:python-and-scala-smoke-the-peace-pipe.html</id><summary type="html">&lt;p&gt;This was my talk on the &lt;a class="reference external" href="http://pygrunn.nl"&gt;PyGrunn&lt;/a&gt; conference last Friday.&lt;/p&gt;
&lt;p&gt;I was explaining how can you communicate services written in different languages using &lt;a class="reference external" href="http://thrift.apache.org/"&gt;Apache Thrift&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;In few days the videos will be available, but TBH, I don't really know if I will publish it here. It was not the first time that I talk in public using English, but it will be the first time that it is recorded... I don't really know if I want to see that! :D&lt;/p&gt;
&lt;p&gt;I really need to improve my speed talking for the next time. I thought that I will not have enough time to explain all, so, my subconscious decided that I should be talking as a machine gun.&lt;/p&gt;
&lt;script async class="speakerdeck-embed" data-id="398a32709de70130aa882eefb3b6c3d2" data-ratio="1.6" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;&lt;p&gt;Enjoy them!&lt;/p&gt;
</summary><category term="pygrunn"></category><category term="talk"></category><category term="apache"></category><category term="thrift"></category><category term="python"></category><category term="scala"></category></entry><entry><title>Here I go PyGrunn'13!</title><link href="http://agonzalezro.github.com/here-i-go-pygrunn13.html" rel="alternate"></link><updated>2013-04-17T00:00:00+02:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-04-17:here-i-go-pygrunn13.html</id><summary type="html">&lt;p&gt;I am really proud of say that the next month I will be giving a talk at
PyGrunn!&lt;/p&gt;
&lt;p&gt;This is a really good new for me because PyGrunn is the conference that my old
colleagues organize since years ago. I was on it first time in 2011 just one
week after I started working at &lt;a class="reference external" href="http://paylogic.com"&gt;Paylogic&lt;/a&gt;. I meet a lot of interesting people
there and I will see them again this year!&lt;/p&gt;
&lt;p&gt;In 2012 I repeat, but at that time I had already started to organize the
&amp;quot;Monthly PyGrunn&amp;quot;s with &lt;a class="reference external" href="http://twitter.com/_ivor"&gt;Ivor&lt;/a&gt;. TBH that talks were quite successful, and not
for the quantity of people that we get there, if not for the quality of them
and the networking after!&lt;/p&gt;
&lt;p&gt;I am really happy too because going there I will be able to see a lot of
friends that I miss! I just moved here 5 months ago but I really want to see
them!&lt;/p&gt;
&lt;p&gt;Now, the less important thing: about the talk! I will be talking about Thrift
and how can we use it to talk between different applications in different
languages (in the examples: Python &amp;amp; Scala). When PyGrunn finish I think that
I will have a video where you can see the talk (or check my English) and I
will upload the slides too!&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="http://www.pygrunn.org"&gt;PyGrunn&lt;/a&gt; for give me this chance!&lt;/p&gt;
</summary><category term="pygrunn"></category><category term="talk"></category><category term="friends"></category><category term="groningen"></category><category term="my-english-is-crap"></category></entry><entry><title>Changes on the blog</title><link href="http://agonzalezro.github.com/changes-on-the-blog.html" rel="alternate"></link><updated>2013-03-20T00:48:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-03-20:changes-on-the-blog.html</id><summary type="html">&lt;p&gt;One of the problems that I always have when I start trying to blog something is
that I get bored very quick of writing and I focus in other things like CMS,
CSS or this kind of things that really doesn't matter if you have good content.&lt;/p&gt;
&lt;p&gt;Today was one of those day when I got bored about it and I decided to make some
changes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The theme is &lt;a class="reference external" href="http://bootswatch.com/readable"&gt;readable&lt;/a&gt; instead &lt;a class="reference external" href="http://bootswatch.com/journal"&gt;journal&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I've added a &lt;a class="reference external" href="http://twitter.com/agonzalezro"&gt;twitter&lt;/a&gt; widget because I post half of my life there :D&lt;/li&gt;
&lt;li&gt;I don't post so often, so I decided that the pagination was not
really needed and instead that I am showing a column with 16 old
post. If you look for a tag you will find this column too, but just
for the post on that tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that you enjoy the changes, and if you are a master of the design,
please, help me! :D You can find all the &lt;a class="reference external" href="http://github.com/agonzalezro/agonzalezro.github.com"&gt;source code of the blog here&lt;/a&gt;!&lt;/p&gt;
</summary><category term="theme"></category><category term="readable"></category><category term="layout"></category></entry><entry><title>DJGUL: What's new on Django 1.5</title><link href="http://agonzalezro.github.com/djgul-whats-new-on-django-15.html" rel="alternate"></link><updated>2013-03-12T21:30:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-03-12:djgul-whats-new-on-django-15.html</id><summary type="html">&lt;p&gt;In this talk Marc Tamlyn (&lt;a class="reference external" href="https://twitter.com/mjtamlyn"&gt;&amp;#64;mjtamlyn&lt;/a&gt;) was
explained to us all the changes in the new &amp;quot;major&amp;quot; version of django,
django 1.5.&lt;/p&gt;
&lt;p&gt;As always you can find the original talks in Internet:
&lt;a class="reference external" href="https://speakerdeck.com/mjtamlyn/whats-new-in-django-1-dot-5"&gt;https://speakerdeck.com/mjtamlyn/whats-new-in-django-1-dot-5&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="major-changes"&gt;
&lt;h2&gt;Major changes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pluggable user models. Which means that you will need some proxy classes
magic or similar to extend your users.&lt;/li&gt;
&lt;li&gt;Python 3 support.&lt;/li&gt;
&lt;li&gt;Security improvements.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;StreamingHTTPResponse&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;The {% url %} tag change his behaviour. It seems that using &lt;tt class="docutils literal"&gt;future&lt;/tt&gt; you
can had this behaviour before (1.3?) but... who use &lt;tt class="docutils literal"&gt;future&lt;/tt&gt;? :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see a better explanation of this points here:&lt;/p&gt;
&lt;div class="section" id="pluggable-user-models"&gt;
&lt;h3&gt;Pluggable user models&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Solution to schema chnages on the default user model.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;AUTH_PROFILE_MODEL&lt;/tt&gt; becomes &lt;tt class="docutils literal"&gt;AUTH_USER_MODEL&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was a problem since 2014 when Django was created.&lt;/p&gt;
&lt;p&gt;If you want to change something this is your first start point:
&lt;tt class="docutils literal"&gt;auth.models.AbstractUser&lt;/tt&gt;. If you want to go one step forward:
&lt;tt class="docutils literal"&gt;auth.models.PermissionMixin&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;auth.models.AbstractBaseUse&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;You can override &lt;tt class="docutils literal"&gt;USERNAME_FIELD&lt;/tt&gt; too, to override the standard username
field of the model.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;contrib.admin&lt;/tt&gt; integration. Which I didn't try yet (Álex) but if it works as
they said, it should be just amazing!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-3"&gt;
&lt;h3&gt;Python 3&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;3.2 and 3.3 supported, but python 2.5 was gone.&lt;/li&gt;
&lt;li&gt;Not yet &amp;quot;production ready&amp;quot;. You will probably be ok, but it's up to you to
give it a chance.&lt;/li&gt;
&lt;li&gt;Upgrade your third party apps! You will be able to import compatibility apps
from django that will help you using this apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Caveats&lt;/strong&gt;: MySQL, PIL, Selenium... this all need to be migrated also :(&lt;/p&gt;
&lt;p&gt;Armin (&lt;a class="reference external" href="https://twitter.com/mitsuhiko"&gt;&amp;#64;mitsuhiko&lt;/a&gt;) said that PIL is already
supported o/&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security"&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ALLOWED_HOSTS&lt;/tt&gt; is a whitelist backported to django 1.3.x and 1.4.x but
required in 1.5.&lt;/p&gt;
&lt;p&gt;You can read the django documentation about this here:
&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts"&gt;https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="streaminghttpresponse"&gt;
&lt;h3&gt;StreamingHTTPResponse&lt;/h3&gt;
&lt;p&gt;Fixes the handling of streaming http responses. Instead use the normal
&lt;tt class="docutils literal"&gt;.content&lt;/tt&gt; you need to use &lt;tt class="docutils literal"&gt;streamed_content&lt;/tt&gt; if you want to access to the
content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h3&gt;{% url %}&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The API was wrong, it was fixed in 1.3 loading from future... but hey, who made that? :)&lt;/li&gt;
&lt;li&gt;Old style is actually gone now.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="more-new-things"&gt;
&lt;h2&gt;More new things&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Caching of related model instances... this will transparently improve the
performance of your site a lot. It was one of the biggest causes of delay on
this new django version.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;update_fields&lt;/tt&gt; is a new variable received on the save method that allows you
to know what are the fileds that has changed.&lt;/li&gt;
&lt;li&gt;PostGIS 2.0 is supported now.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;{% verbatim %}&lt;/tt&gt; that allows a little bit more easy javascript (for
example) development in django templates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="backwards-incompatibilities-perhaps"&gt;
&lt;h2&gt;Backwards incompatibilities (perhaps)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Context in various class views can break.&lt;/li&gt;
&lt;li&gt;Simplejson could cause incompatibilities since python 2.5 was removed from
django compatibility.&lt;/li&gt;
&lt;li&gt;Session not saved on 500 errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="testing"&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;OPTIONS&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;PUT&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DELETE&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;DB flushing, it was move from the end of the test to the beginning of the test.&lt;/li&gt;
&lt;li&gt;Ordering of test executing changes, this shouldn't matter because your test
will be always non dependant, right?&lt;/li&gt;
&lt;li&gt;contrib.localflavor has some changes too.&lt;/li&gt;
&lt;li&gt;contrib.markup usually marked all at safe and hope for the best, now it's not
doing it.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin.py&lt;/span&gt; cleanup&lt;/tt&gt; clear up the sessions, actually, now it's called
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin.py&lt;/span&gt; clearsessions&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;depth argument to select related, to don't follow all the possible joins.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nice-things-you-may-have-missed"&gt;
&lt;h2&gt;Nice things you may have missed&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;LOGIN_URL&lt;/tt&gt; can be an url name now, and django will make the &lt;tt class="docutils literal"&gt;reverse()&lt;/tt&gt;
for you.&lt;/li&gt;
&lt;li&gt;True, False and None in templates.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;user_login_failed&lt;/tt&gt; signal.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;assertXMLEqual()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;index_together&lt;/tt&gt;, create a indexes with several fields.&lt;/li&gt;
&lt;li&gt;admin lists customisable by request.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;django.utils.text.slugify&lt;/tt&gt; get an string in and returns an slug for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="djugl"></category><category term="march"></category><category term="django"></category><category term="1.5"></category></entry><entry><title>DJUGL: Inside Lanyrd architecture</title><link href="http://agonzalezro.github.com/djugl-inside-lanyrd-architecture.html" rel="alternate"></link><updated>2013-03-12T20:30:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-03-12:djugl-inside-lanyrd-architecture.html</id><summary type="html">&lt;p&gt;This talk was just amazing! Andrew Godwin (&lt;cite&gt;&amp;#64;andrewgodwin
&amp;lt;http://twitter.com/andrewgodwin&amp;gt;&lt;/cite&gt; or &lt;a class="reference external" href="http://areacode.org"&gt;http://areacode.org&lt;/a&gt;) gave us a talk about
the internal architecture that they are using at &lt;a class="reference external" href="http://lanyrd.com"&gt;lanyrd.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would say 2 things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Even before that talk I was using lanyrd, it's a really good service if you
are organizing some kind of event.&lt;/li&gt;
&lt;li&gt;At &lt;a class="reference external" href="http://greenmangaming.com"&gt;GreenManGaming&lt;/a&gt; we are using a very similar
infrastructure, which I think that means that when 2 different companies
without any relation are sharing so many layers, it should be good!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this lines you will fine almost a C&amp;amp;P of the Andrew slide that you can
find here: &lt;a class="reference external" href="https://speakerdeck.com/andrewgodwin/inside-lanyrds-architecture"&gt;https://speakerdeck.com/andrewgodwin/inside-lanyrds-architecture&lt;/a&gt;,
but there are some additional notes added by me.&lt;/p&gt;
&lt;div class="section" id="the-origin-story"&gt;
&lt;h2&gt;The Origin Story&lt;/h2&gt;
&lt;p&gt;They launch in Aug'10 and after half an hour going down because the load was
too high&lt;/p&gt;
&lt;p&gt;In Sep'11 they got some inversion that allows them to start with the curren
architecture.&lt;/p&gt;
&lt;p&gt;The ecosystem that they need to take care of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conferences&lt;/li&gt;
&lt;li&gt;profile pages&lt;/li&gt;
&lt;li&gt;emails&lt;/li&gt;
&lt;li&gt;dashboard&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;topics&lt;/li&gt;
&lt;li&gt;guides&lt;/li&gt;
&lt;li&gt;mobile app&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And all this with just 6 technical guys! That know this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You don't need a big team to write a complex product.&lt;/li&gt;
&lt;li&gt;Communication is absolutely key.&lt;/li&gt;
&lt;li&gt;Using Open Source well is also crucial.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-they-run-on"&gt;
&lt;h2&gt;What they run on&lt;/h2&gt;
&lt;p&gt;Almost all the site is written in django with some spices:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;celery for the background tasks.&lt;/li&gt;
&lt;li&gt;management cron jobs.&lt;/li&gt;
&lt;li&gt;served by Gunicorn containers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main services that you can find on, are this:&lt;/p&gt;
&lt;div class="section" id="postresql"&gt;
&lt;h3&gt;PostreSQL&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;main data store for everythin except upload
master &amp;amp; replicated
around 80G in 5 DBs
each server run in RAID1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="redis"&gt;
&lt;h3&gt;Redis&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Task queue transport for Celery and tweet listeners,&lt;/li&gt;
&lt;li&gt;Contains user sets for every conference, user and topic.&lt;/li&gt;
&lt;li&gt;Used for efficient narrowing of queries before Solr is hit,&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="solr"&gt;
&lt;h3&gt;Solr&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stores conferences, users, sessions and more...&lt;/li&gt;
&lt;li&gt;Very rich metada on each item.&lt;/li&gt;
&lt;li&gt;Heavy use of sharding throughout the site.&lt;/li&gt;
&lt;li&gt;They run Solr in master and replicated slave.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="varnish"&gt;
&lt;h3&gt;Varnish&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First point of call for all requests.&lt;/li&gt;
&lt;li&gt;Caches most anonymous requests.&lt;/li&gt;
&lt;li&gt;Enforces read-only mode if enabled.&lt;/li&gt;
&lt;li&gt;One used an one hot spare at all times.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="haproxy"&gt;
&lt;h3&gt;HAProxy&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sits behind Varnish.&lt;/li&gt;
&lt;li&gt;Distributes load amongst frontend servers.&lt;/li&gt;
&lt;li&gt;Re-routes request during deploys.&lt;/li&gt;
&lt;li&gt;They always have 2 up identically configured.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="s3"&gt;
&lt;h3&gt;S3&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stores all uploaded files from users.&lt;/li&gt;
&lt;li&gt;Uploads forms post directly to S3.&lt;/li&gt;
&lt;li&gt;Servers all static assets for the site (images, Css, JS).&lt;/li&gt;
&lt;li&gt;Static assets are versioned with hash to help cache break.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-they-have-eliminated"&gt;
&lt;h2&gt;What they have eliminated&lt;/h2&gt;
&lt;p&gt;It's a shame because I am reading it in several places, but it seems that after
the hype a lot of companies are eliminating MongoDB from their backends.&lt;/p&gt;
&lt;div class="section" id="mongodb"&gt;
&lt;h3&gt;MongoDB&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stored analytics, logs and some other data.&lt;/li&gt;
&lt;li&gt;Lack of schema meant some bad data persisted.
poor complex query performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nevertheless they think that it's a really useful tool for quick prototyping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h3&gt;MySQL&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Primary data store for things that where not stored in MongoDB.&lt;/li&gt;
&lt;li&gt;Very poor complex query performance.&lt;/li&gt;
&lt;li&gt;No advances field types.&lt;/li&gt;
&lt;li&gt;Full database locks during schema changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-great-move-of-2012"&gt;
&lt;h2&gt;The great move of 2012&lt;/h2&gt;
&lt;p&gt;They move from EC2 to Softlayer basically because it's real hardware, if
something fail, just change it).
From MySQL to PostgreSQL for the reasons that he explained before.&lt;/p&gt;
&lt;div class="section" id="why"&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;It seems that lanyrd has a very predictable traffic, they can know months in
advanced what is the expected load.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;Both moves required database downtime, couple of tables were really big, any
change on that table means around 20-30min of downtime.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Replicate Solr and Redis across to new servers.&lt;/li&gt;
&lt;li&gt;Enter RO mode.&lt;/li&gt;
&lt;li&gt;Dump MySQL data.&lt;/li&gt;
&lt;li&gt;Convert MySQL dump into PostgreSQL dump.&lt;/li&gt;
&lt;li&gt;Load PostgresSQL dump.&lt;/li&gt;
&lt;li&gt;Re-point DNS, proxy request from old server.&lt;/li&gt;
&lt;li&gt;Exit RO mode.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After all this process they can say that they have been 1 hour and a half in Read Only mode but without any downtime at all.&lt;/p&gt;
&lt;p&gt;From their experience, the advantages of have a content site are that the RO
mode is completely viable. They logged out all the people from the site and in
the mean time Varnish was blocking all the POST request &amp;amp; cache aggressively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="always-be-deploying"&gt;
&lt;h2&gt;Always be deploying&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They deploy at least 5 times a day, if not 20.&lt;/li&gt;
&lt;li&gt;Nearly all code goes into master or short-lived branches.&lt;/li&gt;
&lt;li&gt;Anything released is feature flagged.&lt;ul&gt;
&lt;li&gt;simple named boolean toggles.&lt;/li&gt;
&lt;li&gt;settable by user, user tag, or conference.&lt;/li&gt;
&lt;li&gt;can change templates, view code, URLs, etc...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just a quick note: if you had never used this feature you should try something
like &lt;a class="reference external" href="https://github.com/disqus/gargoyle"&gt;gargoyle&lt;/a&gt;. It's just amazing to
deploy some functionalities to just some of your users. I don't know what they
are using, but if it's not this, it should be something similar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="legacy-code-decisions"&gt;
&lt;h2&gt;Legacy code &amp;amp; decisions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's fine to have some legacy code. It can speed thing ups.&lt;/li&gt;
&lt;li&gt;A good chunk of their legacy code is gone, some remains (I would say like in
all the big projects :D).&lt;/li&gt;
&lt;li&gt;Big schema change get harder and harder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Awareness (every ppl know what is going on) &amp;amp; always deployable (master branch always shippable).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="small-and-nimble"&gt;
&lt;h2&gt;Small and nimble&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue deployment and development style allows easy project changing&lt;/li&gt;
&lt;li&gt;No long approval processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fix-it-while-you-can"&gt;
&lt;h2&gt;Fix it while you can&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The bigger you get, the harder a fix.&lt;/li&gt;
&lt;li&gt;They moved to PostgreSQL just in time.&lt;/li&gt;
&lt;li&gt;Big schema changes now take days of coding.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="djugl"></category><category term="march"></category><category term="lanyrd"></category><category term="django"></category><category term="solr"></category><category term="celery"></category><category term="postgresql"></category><category term="redis"></category><category term="mongodb"></category><category term="mysql"></category><category term="varnish"></category><category term="haproxy"></category><category term="s3"></category></entry><entry><title>DJUGL: Advanced python trought Django: Metaclasses</title><link href="http://agonzalezro.github.com/djugl-advanced-python-trought-django-metaclasses.html" rel="alternate"></link><updated>2013-03-12T20:00:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-03-12:djugl-advanced-python-trought-django-metaclasses.html</id><summary type="html">&lt;p&gt;This talk was made by Peter Ingles, you can check his twitter here: &lt;a class="reference external" href="http://twitter.com/inglesp"&gt;&amp;#64;inglesp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What is write above is basically what he said, mixed with some of my thoughts.
The talk was really good, and even using metaclasses almost daily
(&lt;tt class="docutils literal"&gt;forms.Form&lt;/tt&gt;) you don't feel the power of them until somebody explain it to
you (shame on me!).&lt;/p&gt;
&lt;p&gt;In all the Peter example we was using Django 1.4.&lt;/p&gt;
&lt;p&gt;The typical example as I said before is &lt;tt class="docutils literal"&gt;forms.Form&lt;/tt&gt; from django.&lt;/p&gt;
&lt;p&gt;For some reason, Peter was in love with the Ponies, so, he tried to create some
meta stable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ponies&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ponies&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;stable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="create-classes-dinamycally"&gt;
&lt;h2&gt;Create classes dinamycally:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ExampleClass&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;bases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a pretty coold way to create classes at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="type"&gt;
&lt;h2&gt;type&lt;/h2&gt;
&lt;p&gt;I don't know you, but I was always using &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; just for the type comparation,
but never for create classes...&lt;/p&gt;
&lt;p&gt;Some &amp;quot;strange&amp;quot; (puzzling) things about &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; is that &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; is a class of type
type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can subclass &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python-3"&gt;
&lt;h2&gt;Python 3&lt;/h2&gt;
&lt;p&gt;The syntax to create a metaclass is sightly different:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Formtype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="key-takeaways"&gt;
&lt;h2&gt;Key takeaways&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;classes are factories for creating objects.&lt;/li&gt;
&lt;li&gt;we can create classes dynamically at runtime.&lt;/li&gt;
&lt;li&gt;metaclasses are factories for creating classes.&lt;/li&gt;
&lt;li&gt;we can control what happens when we create classes&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-slides"&gt;
&lt;h2&gt;The slides&lt;/h2&gt;
&lt;p&gt;You can find the interactive talk of Peter in his github account:
&lt;a class="reference external" href="http://github.com/inglesp/prescons"&gt;http://github.com/inglesp/prescons&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy them!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="djugl"></category><category term="march"></category><category term="django"></category><category term="python"></category><category term="metaclass"></category></entry><entry><title>TechTalk: from python 2.x to python 3</title><link href="http://agonzalezro.github.com/techtalk-from-python-2x-to-python-3.html" rel="alternate"></link><updated>2013-02-12T00:30:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-02-12:techtalk-from-python-2x-to-python-3.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This are some notes that I took while the talk that I saw today, the original
title of the talk that I had the chance to see today was: &amp;quot;Switch to Python
3... Now... Inmediately&amp;quot; by the &lt;a class="reference external" href="http://www.russel.org.uk"&gt;professor Russel Winder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More or less all that you will find here is a transaction, just ordered in my
style and perhaps with some notes by myself.&lt;/p&gt;
&lt;p&gt;Python 2.x remains being the default python. Too many people and organizations
are afraid of the change.&lt;/p&gt;
&lt;p&gt;Python software foundation should declare python 3 the default python
immediately.&lt;/p&gt;
&lt;div class="section" id="problems"&gt;
&lt;h3&gt;Problems&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;some big companies are telling people to don't use it.&lt;/li&gt;
&lt;li&gt;some crucial projects are not using Python 3 yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="companies-and-people"&gt;
&lt;h3&gt;Companies and people&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;from the point of view of Russel, the problem are those companies that
doesn't want to migrate, and not the fact that the code needs to be migrate.&lt;/li&gt;
&lt;li&gt;at least they should have version 2 and 3 compatible on the codebase.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="migration"&gt;
&lt;h3&gt;Migration&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;2to3&lt;/tt&gt; tool is not useful at all. Just one shot transform tool.&lt;/li&gt;
&lt;li&gt;the manual the better? From my POV (Álex) you can never let a machine this
kind of work and it usually will be a biblical proportion job for large
codebases. And more important... usually without tests :D&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="justifications"&gt;
&lt;h2&gt;Justifications&lt;/h2&gt;
&lt;p&gt;Python 2 is a dead end and python 3 is the developing future.&lt;/p&gt;
&lt;p&gt;This piece of code is compatible with both versions, why don't use them?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Problem: &lt;tt class="docutils literal"&gt;print(x)&lt;/tt&gt; support multiple parameter in python 3, so, let's import
the function from future to have the same behaviour in python 2.x:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's make it bigger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;division&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;absolute_import&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;print_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this we will avoid problems with floats on divisions, add &lt;cite&gt;.&lt;/cite&gt; to the
imports, import the python3 version of print and work always with unicode.&lt;/p&gt;
&lt;p&gt;Another problem is the list-comprehensions which will change a little bit,
instead create list, they will create sets.&lt;/p&gt;
&lt;div class="section" id="some-other-problems"&gt;
&lt;h3&gt;Some other problems&lt;/h3&gt;
&lt;p&gt;python 2 is strict, but python 3 is kinda lazy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will produce an iterator in python 3, in python 2 is a data structure.&lt;/p&gt;
&lt;p&gt;This is one of the biggest issues into the migration, other functions with same
problems will be, for example: &lt;tt class="docutils literal"&gt;items&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;keys&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;values&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;iteritems&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;iterkeys&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;itervalues&lt;/tt&gt; which in python 3 will become: &lt;tt class="docutils literal"&gt;items&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;keys&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;values&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If you want a data structure instead a iterator, you should make it manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# python 2.x&lt;/span&gt;
&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# python 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="concurrency"&gt;
&lt;h3&gt;Concurrency&lt;/h3&gt;
&lt;p&gt;At least IronPython and Jython do not have a &lt;a class="reference external" href="http://wiki.python.org/moin/GlobalInterpreterLock"&gt;GIL&lt;/a&gt; as CPython and PyPy do.&lt;/p&gt;
&lt;p&gt;There is an experiment to mode GIL out of PyPy.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Actors&lt;/dt&gt;
&lt;dd&gt;communicate processes with messages.&lt;/dd&gt;
&lt;dt&gt;Dataflow&lt;/dt&gt;
&lt;dd&gt;operators connected by channels with activity triggered by arrival of data on
the channels.&lt;/dd&gt;
&lt;dt&gt;CSP&lt;/dt&gt;
&lt;dd&gt;we have &lt;a class="reference external" href="http://code.google.com/p/pycsp/"&gt;PyCSP&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/python-concurrency/python-csp"&gt;PythonCSP&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="data-parallelism"&gt;
&lt;h3&gt;Data parallelism&lt;/h3&gt;
&lt;p&gt;Transform a sequence to another sequence where all individual actions happen at
the same time. Python has not a lot of utilities for that, since Go or D do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="futures-are-the-future"&gt;
&lt;h3&gt;Futures are the future&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;cite&gt;concurrent.futures&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;python 3.2 package to abstract over threads and processes to give an
asynchronous function call and future system.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="under-challengue"&gt;
&lt;h2&gt;Under challengue&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Go is taking over from Python, because it's native and it has a solid concurrency models (CSP).&lt;/li&gt;
&lt;li&gt;D is on the market too.&lt;/li&gt;
&lt;li&gt;Native programs are almost always quicker than python.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="funny-points"&gt;
&lt;h2&gt;Funny points&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One rule of the guy is to use one month a year just &lt;tt class="docutils literal"&gt;ed&lt;/tt&gt; no &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;emacs&lt;/tt&gt; rubbish.&lt;/li&gt;
&lt;li&gt;C has a rubbish syntax in comparison with Python. You will touch your head
if you check some C++ code: why!?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="migration"></category><category term="python3k"></category></entry><entry><title>codereview from the POV of a noob</title><link href="http://agonzalezro.github.com/codereview-from-the-pov-of-a-noob.html" rel="alternate"></link><updated>2013-01-29T19:16:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-01-29:codereview-from-the-pov-of-a-noob.html</id><summary type="html">&lt;p&gt;Hi g(irl|uy)s! I would like to start with a disclaimer:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I am not (and I don't pretend to be) a craftmanship trooper (they like to be
called like that isn't?), senior engineer with more years of experience that
the technology has, guru, blablabla...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I just want to show my opinion about this process (which I really like!). But
more important that share my opinion, is to know what is yours, so, please,
comment!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today we had an interesting conversation at work about how we make and how we
should make our codereviews. My point of view is that there are three different
things to check:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Code syntax.&lt;/strong&gt; It's a part that should be 100% automagically done. I
usually work with python and I let this work to &lt;a class="reference external" href="http://pypi.python.org/pypi/flake8"&gt;Flake8&lt;/a&gt; on vim, but it's
always good to have a &lt;cite&gt;git&lt;/cite&gt; hook.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability and maintainability.&lt;/strong&gt; I am afraid that this is the worst part
to check, it's a manual process and it is really subjective. Some people can
think that use &lt;cite&gt;itertools&lt;/cite&gt; with 2 lambda functions is pretty clear and
comprehensible, other people can think that this code is the result of a
dirty mind developer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functionality.&lt;/strong&gt; Automated test! All the test that you can, and of course,
they worst the time that you will spent developing them. There are things
that can not be easily tested but in that case let's suppose that you were
clever enough to test them manually and in the case that is possible you
can show it to anybody else (this really helps!).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As I said the point 1 can be (and should be) automated! It's really easy to do,
the same way that &lt;a class="reference external" href="http://pypi.python.org/pypi/flake8"&gt;Flake8&lt;/a&gt; exists for python, I am pretty sure that you will
have one for your favourite language. It's really painful get back a pull
request just for some spaces that are not in place.&lt;/p&gt;
&lt;p&gt;For the point 3, yep, let me jump the second for now. Unit testing, integration
testing, functional testing... whatever you want, but try to automate it. This
+ a CI server will make your live really &amp;quot;easy&amp;quot;!&lt;/p&gt;
&lt;p&gt;And finally, about the second point. Each developer have their way to do the
things, but usually there are some points that can be fixed and sometimes
because we don't know, other times just because we are lazy but we post code
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;write&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{authorized: True, &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;: a}))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{authorized: True, &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;: a}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is just an example, but you should agree with me that it's really easy to
improve. This is what, in my opinion should be more checked in the reviews.&lt;/p&gt;
&lt;p&gt;This was just an example (please, remember that :D), but could be improved with
something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;proper_function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proper_variable_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is an amazing function that will do just a thing.&lt;/span&gt;

&lt;span class="sd"&gt;    :param proper_variable_name: what I am?&lt;/span&gt;

&lt;span class="sd"&gt;    :returns: An HttpResponse object with the following JSON content:&lt;/span&gt;

&lt;span class="sd"&gt;        {&amp;#39;authorized&amp;#39;: bool,&lt;/span&gt;
&lt;span class="sd"&gt;         &amp;#39;proper_variable_name: int}&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;is_authorized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;write-resource&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;authorized&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_authorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;proper_variable_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;proper_variable_name&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those were the improvements (again, remember that it's just an example):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Give a proper name to the function. Don't be afraid, everybody has
autocompletion! :D&lt;/li&gt;
&lt;li&gt;Give a proper name to the vars.&lt;/li&gt;
&lt;li&gt;DOCUMENT! In this example, ready for Sphinx.&lt;/li&gt;
&lt;li&gt;Simplify the if statements, actually, after take a look you made it
dissapear.&lt;/li&gt;
&lt;li&gt;One return.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, what's your opinion? What do you think that is more important in a
codereview.&lt;/p&gt;
</summary><category term="codereview"></category><category term="python"></category></entry><entry><title>Best vim colors ever!</title><link href="http://agonzalezro.github.com/best-vim-colors-ever.html" rel="alternate"></link><updated>2013-01-23T23:52:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2013-01-23:best-vim-colors-ever.html</id><summary type="html">&lt;p&gt;Sometimes a developer needs a change, and what can you change better that the
color scheme that you use to develop? You are more than 8h per day in front of
your vim with some beautiful, or crappy, code in front of you. In the first
case the colors doesn't matter, but in the second it's really important to
enjoy, at least, the colors!&lt;/p&gt;
&lt;p&gt;The colors scheme that you use is something really personal, but it always help
when somebody checked them and show them to you without the embarrasment of
doing it yourself, and this is what I will do, because I was looking, but out
of the amazing vimcolorschemetest project nobody seems to give importance to
this. This project is really good, but it just show to you a bunch of colors
without any order of preference, I will fix that for you!&lt;/p&gt;
&lt;p&gt;Below is the list of the colors that I've tried that need some mention here.
The order is just alfabetically, not my preferences.&lt;/p&gt;
&lt;div class="section" id="my-choices"&gt;
&lt;h2&gt;My choices&lt;/h2&gt;
&lt;div class="section" id="bensday"&gt;
&lt;h3&gt;bensday&lt;/h3&gt;
&lt;a class="reference external image-reference" href="static/vim/bensday.png"&gt;&lt;img alt="static/vim/bensday.png" class="align-center" src="static/vim/bensday.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="clarity"&gt;
&lt;h3&gt;clarity&lt;/h3&gt;
&lt;a class="reference external image-reference" href="static/vim/clarity.png"&gt;&lt;img alt="static/vim/clarity.png" class="align-center" src="static/vim/clarity.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="desertex"&gt;
&lt;h3&gt;desertEx&lt;/h3&gt;
&lt;p&gt;It's really similar to deser, which comes by default&lt;/p&gt;
&lt;a class="reference external image-reference" href="static/vim/desertEx.png"&gt;&lt;img alt="static/vim/desertEx.png" class="align-center" src="static/vim/desertEx.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="jelleybeans"&gt;
&lt;h3&gt;jelleybeans&lt;/h3&gt;
&lt;p&gt;My favourite for now, but make me chnage my opinion&lt;/p&gt;
&lt;a class="reference external image-reference" href="static/vim/jelleybeans.png"&gt;&lt;img alt="static/vim/jelleybeans.png" class="align-center" src="static/vim/jelleybeans.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="winsterday"&gt;
&lt;h3&gt;winsterday&lt;/h3&gt;
&lt;a class="reference external image-reference" href="static/vim/winsterday.png"&gt;&lt;img alt="static/vim/winsterday.png" class="align-center" src="static/vim/winsterday.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;p&gt;I am currently using &lt;em&gt;jelleybeans&lt;/em&gt; (after a recommendation of my colleague
Robin), I really like it, but a little bit &amp;quot;happier&amp;quot; colors would not be bad
either :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="find-them"&gt;
&lt;h2&gt;Find them!&lt;/h2&gt;
&lt;p&gt;You can find all this colors and a lot more here:
&lt;a class="reference external" href="https://github.com/flazz/vim-colorschemes"&gt;https://github.com/flazz/vim-colorschemes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please, I am open to all the suggestion that you want, since the new amazing
color scheme for vim that I don't know yet, until the killer plugin that I can
not miss! And of course, if you want to codereview the code that you see on the
screenshots feel free too!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="colors"></category><category term="python"></category><category term="bensday"></category><category term="clarity"></category><category term="desertEx"></category><category term="jelleybeans"></category><category term="winsterday"></category></entry><entry><title>PyGrunn Winter Hackathon 2012</title><link href="http://agonzalezro.github.com/pygrunn-winter-hackathon-2012.html" rel="alternate"></link><updated>2012-11-27T00:00:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2012-11-27:pygrunn-winter-hackathon-2012.html</id><summary type="html">&lt;p&gt;Few days ago, actually, more than one week ago (but I was very busy :) we made
our first &lt;a class="reference external" href="http://paylogic.github.com/winter-hackathon/"&gt;PyGrunn hackathon&lt;/a&gt;. I was lucky and from all the list of ideas, the
selected was one of mines! The slides generator, that finally we call
&lt;strong&gt;hovercraft&lt;/strong&gt;. Here is a small introduction about what I wanted:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A small platform to create slides and have them always associated to a web
with this possibilities:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Create an account with Google (or perhaps twitter, facebook...), but Google
seems the best option for me now.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Create or edit new slides related with this account. This slides
creator/editor will have the following functionalities:&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Select one image for background in fullscreen.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Write one or 2 lines of text that will always fulfill the width of the
slide.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Change the font family.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Have a permanent link to your slide (completely public for now).&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the hackathon we got something very similar to what I wanted, with some
small issues. But this post is not about what we did wrong! This post is about
which technologies did we use to finish the project and perhaps, if I am lucky,
start a discussion on why we did/didn't make a good choice.&lt;/p&gt;
&lt;div class="section" id="how-do-we-achieve-this"&gt;
&lt;h2&gt;How do we achieve this?&lt;/h2&gt;
&lt;div class="section" id="backend"&gt;
&lt;h3&gt;Backend&lt;/h3&gt;
&lt;p&gt;The backend of the application was almost inexistent, we only wanted to allow
the users to login with a Google account to have access to edit their slides.
Being a hackathon we didn't spend time adding &lt;abbr title="Create/Read/Update/Delete"&gt;CRUD&lt;/abbr&gt; functionalities to manage the users.&lt;/p&gt;
&lt;p&gt;If you want to delete your user, let me know, I will do it by hand :) It was
made with &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, Flask-OAuth for the authentication with Google and &lt;a class="reference external" href="http://redis.io/"&gt;redis&lt;/a&gt;
to store the presentations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frontend"&gt;
&lt;h3&gt;Frontend&lt;/h3&gt;
&lt;p&gt;The viewer was really simply too because from the beginning we wanted to play
with the editor (it was more funny). For doing it we used &lt;a class="reference external" href="http://lab.hakim.se/reveal-js/#/"&gt;revealjs&lt;/a&gt; to show
the presentation with slide effect and &lt;a class="reference external" href="http://fittextjs.com/"&gt;jquery-fittext&lt;/a&gt; to make it fullslide.&lt;/p&gt;
&lt;p&gt;Now the important part! We made the editor with &lt;a class="reference external" href="http://agonzalezro.github.com/backbonejs-underscore-small-intro.html"&gt;backbone and underscore&lt;/a&gt;, it
seems to us the better choice, since we will have 3 principal views:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The background chooser&lt;/dt&gt;
&lt;dd&gt;which is connection to &lt;a class="reference external" href="http://www.deviantart.com/"&gt;deviantart&lt;/a&gt; to perform a
query of good backgrounds for your slide. Then you can click on one of the
results and will be applied to the current slide.&lt;/dd&gt;
&lt;dt&gt;The font chooser&lt;/dt&gt;
&lt;dd&gt;which is loading some google fonts, we wanted to do this
automagically but we couldn't finish it at time. The behaviour is the same,
you choose a font and its applied to the current slide.&lt;/dd&gt;
&lt;dt&gt;The slide content&lt;/dt&gt;
&lt;dd&gt;that should be &lt;abbr title="What You See Is What You Get"&gt;WYSIWYG&lt;/abbr&gt;
but for now is on the middle, because we couldn't make the text bigger while
you are writing.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;And finally the deployment that was made with &lt;cite&gt;heroku&lt;/cite&gt; and &lt;cite&gt;redistogo&lt;/cite&gt; that
allows you to use a 5M non-persistant DB that is good for a demo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can see &lt;cite&gt;the list of all the projects&lt;/cite&gt; or...&lt;/li&gt;
&lt;li&gt;You can find all the &lt;a class="reference external" href="https://github.com/agonzalezro/hovercraft"&gt;source on github&lt;/a&gt; or...&lt;/li&gt;
&lt;li&gt;You can &lt;a class="reference external" href="http://nameless-spire-1402.herokuapp.com/"&gt;try a demo&lt;/a&gt; too!&lt;/li&gt;
&lt;li&gt;And if you are too lazy to try it, here you have an screenshot:&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="static/hovercraft.png"&gt;&lt;img alt="static/hovercraft.png" class="align-center" src="static/hovercraft.png" style="width: 66%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks"&gt;
&lt;h2&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;I really want to thank &lt;a class="reference external" href="http://www.paylogic.nl"&gt;Paylogic&lt;/a&gt; for letting us a place where to do the project
and for provide us food &amp;amp; beers. What a developer will develop without food and
beer?&lt;/p&gt;
&lt;p&gt;I want to thank too all the guys that &amp;quot;spend&amp;quot; the weekend with me having fun, but working hard too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The good point of all this editing is that thanks to backbone and thanks to the
backend guys is saved without any action needed. The idea of this full project
was:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Have fun!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Simplifying slide creation&lt;/li&gt;
&lt;li&gt;Make it really simply to share those slides.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I didn't want to go really depth into the development of this project, &lt;strong&gt;I only wanted to give a quick overview of what we made in two days.&lt;/strong&gt; But if you are really interested on something more explained, let me know on the comments and I will try to help you in all what I can.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="hackathon"></category><category term="pygrunn"></category><category term="paylogic"></category><category term="backbone"></category><category term="flask"></category><category term="slides"></category><category term="pygrunn"></category></entry><entry><title>Graphite, Carbon and Diamond</title><link href="http://agonzalezro.github.com/graphite-carbon-and-diamond.html" rel="alternate"></link><updated>2012-11-06T19:30:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2012-11-06:graphite-carbon-and-diamond.html</id><summary type="html">&lt;p&gt;Two days ago was my, sadly, last PyGrunn monthly meeting. Thanks to &lt;a class="reference external" href="http://www.linkedin.com/profile/view?id=17961952&amp;amp;locale=en_US&amp;amp;trk=tyah"&gt;Bram&lt;/a&gt; now
we know a little bit more about how to monitoring with Python applications.&lt;/p&gt;
&lt;p&gt;Below you will find the notes that I take to the people that couldn't assist to
the talk. But they are only that, some notes, don't expect to find a really cool
story on them. I am pretty sure that &lt;a class="reference external" href="/graphite.slides/graphite.html"&gt;the original slides made by Bram&lt;/a&gt; will help
you.&lt;/p&gt;
&lt;div class="section" id="why-graphite"&gt;
&lt;h2&gt;Why graphite?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dev friendly&lt;/li&gt;
&lt;li&gt;Ops friendly&lt;/li&gt;
&lt;li&gt;Growth friendly: very scalable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some important companies are using it: Instragram, Etsy, Github, &lt;a class="reference external" href="http://www.kalooga.com"&gt;Kalooga&lt;/a&gt; (this is the company where Bram is working :).&lt;/p&gt;
&lt;p&gt;It's a project created by &lt;a class="reference external" href="orbitz.com"&gt;Orbitz.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ecosystem"&gt;
&lt;h2&gt;Ecosystem&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Graphite&lt;/dt&gt;
&lt;dd&gt;The tool that makes the graphs.&lt;/dd&gt;
&lt;dt&gt;Carbon&lt;/dt&gt;
&lt;dd&gt;Colects the statistics.&lt;/dd&gt;
&lt;dt&gt;Whisper&lt;/dt&gt;
&lt;dd&gt;Metrics &lt;cite&gt;RRD (Round Robin database)&lt;/cite&gt;.&lt;/dd&gt;
&lt;dt&gt;Diamond&lt;/dt&gt;
&lt;dd&gt;It's the metrics collector, they are others: CollectD, Munin, Ganglia... Of
course, you can develop yours.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-you-gate-the-data-in"&gt;
&lt;h2&gt;How do you gate the data in?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create an HTTP connection to the server.&lt;/li&gt;
&lt;li&gt;Each line will be a data point.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want namespaces you can always use dots &lt;cite&gt;.&lt;/cite&gt;. Example: &lt;cite&gt;pygrunn.load
[load] [now]&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="improvements"&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;Why don't use statsd? It's a layer for Graphite that you can use to keep your
application running and send the data to statsd. If it can write it ok, if not,
you have a problem.&lt;/p&gt;
&lt;p&gt;The original implementation of StatsD is in Node.js but there are another
projects that do it with C (StatsD-c) or python (Bucky) or [write your prefered
language here].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uses"&gt;
&lt;h2&gt;Uses&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open a &lt;cite&gt;dev&lt;/cite&gt; file and write directly to it.&lt;/li&gt;
&lt;li&gt;Open HTTP connection.&lt;/li&gt;
&lt;li&gt;Use a statsd decorator.&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="plots"&gt;
&lt;h2&gt;Plots&lt;/h2&gt;
&lt;p&gt;You can plot data with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;CSV&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;You can do funny things as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check the registered users over past day in json data&lt;/li&gt;
&lt;li&gt;Keep track of your 404 errors&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="where-is-the-data-store"&gt;
&lt;h2&gt;Where is the data store?&lt;/h2&gt;
&lt;p&gt;They are stored in files, in case that you run out of space this data will be
stored on the Carbon cache until something happen to it.a&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functions"&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;You can filter results, for example mostDeviant (take a look to the slides to
see the screenshots that show the use).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-also-nice"&gt;
&lt;h2&gt;What's also nice?&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Sentry&lt;/dt&gt;
&lt;dd&gt;Error caching middleware that you can run with your WSGI application to
check the Exceptions and the stacktraces.&lt;/dd&gt;
&lt;dt&gt;Shinken&lt;/dt&gt;
&lt;dd&gt;It's also written in python and it's compatible with Nagios. It could be a
good complement to Graphite to show some alerts when the thing are really
wrong.&lt;/dd&gt;
&lt;dt&gt;New Relic&lt;/dt&gt;
&lt;dd&gt;It's a Web Application Performance Management (&lt;cite&gt;APM (Application
Performance Management&lt;/cite&gt;).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</summary><category term="graphite"></category><category term="carbon"></category><category term="diamond"></category><category term="monitoring"></category><category term="python"></category><category term="pygrunn"></category></entry><entry><title>backbone.js + underscore: small intro</title><link href="http://agonzalezro.github.com/backbonejs-underscore-small-intro.html" rel="alternate"></link><updated>2012-11-01T00:30:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2012-11-01:backbonejs-underscore-small-intro.html</id><summary type="html">&lt;p&gt;Today, &lt;a class="reference external" href="http://twitter.com/olegpidsadnyi/"&gt;Oleg&lt;/a&gt; gave a talk about backbone at
&lt;a class="reference external" href="http://paylogic.nl/"&gt;Paylogic&lt;/a&gt;. We were using it for a really fancy
application inside our backoffice, it was quite funny write it and Oleg
decided to share the knowledge.&lt;/p&gt;
&lt;p&gt;I used the techtalk to take some notes and, since this piece of code will
have no sense out of our backoffice, I've written a small example that you can
find as a &lt;a class="reference external" href="https://gist.github.com/3982819"&gt;gist&lt;/a&gt; on my github. I will use it to explain to you some of the
useful things that you can do with backbone and underscore. Feel free to
improve it.&lt;/p&gt;
&lt;p&gt;This is only a introductory post, if you want advance stuff you should go to
the &lt;a class="reference external" href="http://backbonejs.org/"&gt;backbone official documentation&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://underscorejs.org/"&gt;underscore
docs&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Backbone is really useful when you make complex GUIs on client side. You can
make your code like in a desktop app using events to handle the actions. It's
not needed to pass around instances of parents views, let's use only the
events for that purpose, and let the child decide.&lt;/p&gt;
&lt;p&gt;You have models too, that you can sync (or not) with the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="models"&gt;
&lt;h2&gt;Models&lt;/h2&gt;
&lt;p&gt;In backbone you can have local model and sync them with the server or with
local storage (not explained in this intro). In our example we will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a collection to save our objects (type Item) in.&lt;/li&gt;
&lt;li&gt;Create the model Item.&lt;/li&gt;
&lt;li&gt;Create 2 object type Item inside this collection.&lt;/li&gt;
&lt;li&gt;Render them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 3 points can be made only with these lines of code. It's really simple!
(after know how to do it :p):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Setting values in the objects With .set will trigger the event
change. You can silent it in case that needed, but it's really useful, for
example, to save it.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Second note&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;backbone is f***ing clever! Imagine, you are changing a name, if the
name has changed on the collection, the event will be raised, if not, it will
not. This means that if you are editing, but finally you change your mind and
you didn't made any change, the event will not be raised.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="events"&gt;
&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;They are really useful to remove dependencies between elements. For example,
with jQuery if you change a element from another, the first one needs to know
about the second. With backbone you can catch the event with the child element
and do whatever you want with it.&lt;/p&gt;
&lt;p&gt;On the example of my &lt;a class="reference external" href="https://gist.github.com/3982819"&gt;gist&lt;/a&gt; I show an alert box with the name of the element.
But you could, for example, change it to an editable input.&lt;/p&gt;
&lt;p&gt;This is the code of the example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ItemView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dblclick&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;onDoubleClick&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;onDoubleClick&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hey! Why do you click on &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Play with this :)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are binding the &lt;tt class="docutils literal"&gt;dblclick&lt;/tt&gt; event to the function &lt;tt class="docutils literal"&gt;onDoubleClick&lt;/tt&gt;. This
function will receive the event, and the event will have the target (in this
case the &lt;tt class="docutils literal"&gt;&amp;lt;li/&amp;gt;&lt;/tt&gt; that we are clicking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="underscore"&gt;
&lt;h2&gt;Underscore&lt;/h2&gt;
&lt;p&gt;It's really useful to Work with collections. In out example we are using it to
iterate over the items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;itemview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you read carefully this piece of code you will realize that we are
instantiating a new ItemView for each particular item, so it has its own
container element created on the fly, re-renderable each time when data is
updated and all events are delegated to this element.&lt;/p&gt;
&lt;p&gt;The amazing thing that you can do with underscore is use templates (yes, like
jinja or django-templates, but in JS)! And we are doing it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ItemView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#item-template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/template&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item-template&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="extra-ball"&gt;
&lt;h2&gt;Extra ball&lt;/h2&gt;
&lt;p&gt;Use &lt;tt class="docutils literal"&gt;_.debounce&lt;/tt&gt; to don't call the functions thousands of times, example
drag&amp;amp;dropping an element it will be useful.&lt;/p&gt;
&lt;p&gt;For example in our project we had to sort with drag and drop some elements of a
list, instead send this event in each drag movement, we made it after 200s
being quiet with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please comment your thoughts about the post. We are all here to learn, and it's
really easy that I made some mistake explaining this. Furhtermore, I know that
my English is not really good, so, I will apreciate constructive comments about
it too :)&lt;/p&gt;
&lt;p&gt;Enjoy it!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="backbone"></category><category term="undercore"></category><category term="javascript"></category><category term="gui"></category></entry><entry><title>Fix low wifi speed on Linux (Ubuntu) with chip Atheros AR9285</title><link href="http://agonzalezro.github.com/fix-low-wifi-speed-on-linux-ubuntu-with-chip-atheros-ar9285.html" rel="alternate"></link><updated>2011-07-03T13:07:00+02:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2011-07-03:fix-low-wifi-speed-on-linux-ubuntu-with-chip-atheros-ar9285.html</id><summary type="html">&lt;p&gt;I was very happer after buy my new computer Dell Vostro v130, but after
install Linux on it I've realized that the download speed via WiFi was
very slow! To solve this I found two &amp;quot;solutions&amp;quot;, one of them works, but
the other not (for me).&lt;/p&gt;
&lt;p&gt;The solutions that didn't work is more easy, so I will start with it,
you must install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;linux-backports-modules-net-natty-generic&lt;/span&gt;&lt;/tt&gt;, you can do
it via synaptic, ubuntu software center, aptitude, apt... I show you a
screenshot doing it with ubuntu software center:&lt;/p&gt;
&lt;a class="reference external image-reference" href="static/software_center.png"&gt;&lt;img alt="static/software_center.png" class="align-center" src="static/software_center.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;p&gt;The second &amp;quot;solution&amp;quot; is deactivate the hardware cryptography of the
module, I don't know if this could cause security problems or instead
use hardware it will use software crypt, anyway, it is the best
solutions that I find until the moment.&lt;/p&gt;
&lt;p&gt;To do that, you must create the file &lt;tt class="docutils literal"&gt;/etc/modprobe.d/ath9k.conf&lt;/tt&gt; with
the content: &lt;tt class="docutils literal"&gt;options ath9k nohwcrypt=1&lt;/tt&gt;, you can do it easily with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
echo &amp;quot;options ath9k nohwcrypt=1&amp;quot; &amp;gt; /etc/modprobe.d/ath9k.conf
&lt;/pre&gt;
&lt;p&gt;If you have any questions, or you find a better solution, please, let me
know.&lt;/p&gt;
</summary><category term="low speed"></category><category term="linux"></category><category term="atheros"></category><category term="wifi"></category><category term="ath9k"></category><category term="ubuntu"></category><category term="ar9285"></category></entry><entry><title>I'm starting to hate GNOME 3</title><link href="http://agonzalezro.github.com/im-starting-to-hate-gnome-3.html" rel="alternate"></link><updated>2011-06-08T19:02:00+02:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2011-06-08:im-starting-to-hate-gnome-3.html</id><summary type="html">&lt;p&gt;First of all, I'm GNOME user as main desktop on Linux since the version
1.x (about 10 years ago). I've played with another desktops but GNOME
was always in my heart. But now, with the arrival of GNOME 3 and after
two weeks using it I can say that I'm starting to hate it. In this new
version it has a lot of functions that I don't like and doesn't have a
lot of functions that I like :)&lt;/p&gt;
&lt;p&gt;After see my arguments, perhaps you can help me to change my opinion but
possibily my next post will treat about how erase GNOME 3 and go back to
Unity. Go to see them:&lt;/p&gt;
&lt;a class="reference external image-reference" href="static/fuuuu.jpg"&gt;&lt;img alt="static/fuuuu.jpg" class="align-center" src="static/fuuuu.jpg" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;div class="section" id="dynamic-virtual-desktops"&gt;
&lt;h2&gt;Dynamic virtual desktops&lt;/h2&gt;
&lt;p&gt;I've always used virtual desktops. One for terminals, antoher for
explorers, another for music and a extra one for all other stuff. When I
want to go to my explorer I push Alt+2 and change my virtual desktop to
2. But now, I can't do it, because if I want to open the explorers in
the desktop 2 I must open something in the desktop one, but I don't like
it!&lt;/p&gt;
&lt;p&gt;This is a very big problem for me because I'm not accustomed to use
Alt-Tab to change the windows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-you-close-the-las-window-in-a-desktop"&gt;
&lt;h2&gt;When you close the las window in a desktop...&lt;/h2&gt;
&lt;p&gt;the gnome-shell will be open! I don't like it! Perhpas I've closed this
window to go to my home folder, let me do that!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alt-f2-doesn-t-autocomplete"&gt;
&lt;h2&gt;Alt+F2 doesn't autocomplete&lt;/h2&gt;
&lt;p&gt;GNOME always had this option instead KDE that didn't have it, and now,
they erase it? I can't understand why! I know that you can use the Super
key (the fuc***g windows key presented on all keyboards), but use the
gnome-shell to open a program isn't so quickly as open it with alt-f2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="autologin-on-gdm"&gt;
&lt;h2&gt;Autologin on GDM&lt;/h2&gt;
&lt;p&gt;I like to suppose that this bug is only on my pc, because I've tried to
configure my autologin user and never ever is autologued. Perhaps I
should submit a bug for this case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="difficulty-to-install-extensions"&gt;
&lt;h2&gt;Difficulty to install extensions&lt;/h2&gt;
&lt;p&gt;I will not say anything more about this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-autohide-bar-and-no-more-bars"&gt;
&lt;h2&gt;No autohide bar, and no more bars?&lt;/h2&gt;
&lt;p&gt;I know that gnome-shell isn't thinked to do that, but perhaps they must
give a chance to do that to the users that like it.&lt;/p&gt;
&lt;p&gt;And finally, one thing that happens with gnome-shell, gnome-do, meego
desktop... Why if you have hide files they appear on recent documents or
in the shell when you start to type? Of course... this hide files isn't
for p0rn, they are my personal documents only.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="unity"></category><category term="gnome3"></category><category term="hate"></category></entry><entry><title>How-to install GNOME 3 instead of Unity on Ubuntu 11.04</title><link href="http://agonzalezro.github.com/how-to-install-gnome-3-instead-of-unity-on-ubuntu-1104.html" rel="alternate"></link><updated>2011-06-08T18:28:00+02:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2011-06-08:how-to-install-gnome-3-instead-of-unity-on-ubuntu-1104.html</id><summary type="html">&lt;p&gt;I don't have anything against Unity, but sometimes I want to test, and
this is one of this times.&lt;/p&gt;
&lt;p&gt;I don't know the reason (or perhaps I do), but install GNOME 3 on a
ubuntu system isn't as easy as it must be.&lt;/p&gt;
&lt;p&gt;First of all we need to add the GNOME 3 repos, so, in a console (Alt+F2
and then write gnome-terminal) you must write:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo add-apt-repository ppa:gnome3-team/gnome3
&lt;/pre&gt;
&lt;p&gt;Then, we must update our system and install the gnome shell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get updatesudo apt-get dist-upgradesudo apt-get install gnome-shell
&lt;/pre&gt;
&lt;p&gt;After that, sometimes we have problems with the themes (you can reboot
to test it, but I recommend you to follow this steps), so, we must
remove the accesibility themes and install the new ones (and another
program that we will need after that):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get remove gnome-accessibility-themessudo apt-get install gnome-themes-standard gnome-tweak-tool
&lt;/pre&gt;
&lt;p&gt;Well... now, you can reboot your system and login with GNOME selected as
session. You will see your new GNOME 3, but, we must tweak it, for this,
you can push Alt+F2 and write:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gnome-tweak-tool
&lt;/pre&gt;
&lt;p&gt;I recommend you to have this themes configuration (you can change the
icons if you like) and activate the option on the first tab called &amp;quot;Have
file manager handle the desktop&amp;quot;:&lt;/p&gt;
&lt;a class="reference external image-reference" href="static/tweak_tool.png"&gt;&lt;img alt="static/tweak_tool.png" class="align-center" src="static/tweak_tool.png" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;p&gt;Good luck! And if you have any trouble, please, feel free to ask me in
the comments!&lt;/p&gt;
&lt;p&gt;PS:&amp;nbsp;&lt;a class="reference external" href="http://twitter.com/marioquartz"&gt;&amp;#64;marioquartz&lt;/a&gt;&amp;nbsp;wants to see the result, so here it is (click to
enlarge)!&lt;/p&gt;
&lt;a class="reference external image-reference" href="static/gnome3_desktop.png"&gt;&lt;img alt="static/gnome3_desktop.png" class="align-center" src="static/gnome3_desktop.png" style="width: 50%;" /&gt;&lt;/a&gt;
</summary><category term="unity"></category><category term="gnome3"></category><category term="desktop"></category><category term="ubuntu"></category><category term="gnome"></category></entry></feed>