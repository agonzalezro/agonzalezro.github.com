<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Álex's blog</title><link href="http://agonzalezro.github.com/" rel="alternate"></link><link href="http://agonzalezro.github.com/feeds/dev.atom.xml" rel="self"></link><id>http://agonzalezro.github.com/</id><updated>2012-11-27T00:00:00+01:00</updated><entry><title>PyGrunn Winter Hackathon 2012</title><link href="http://agonzalezro.github.com/pygrunn-winter-hackathon-2012.html" rel="alternate"></link><updated>2012-11-27T00:00:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2012-11-27:pygrunn-winter-hackathon-2012.html</id><summary type="html">&lt;p&gt;Few days ago, actually, more than one week ago (but I was very busy :) we made
our first &lt;a class="reference external" href="http://paylogic.github.com/winter-hackathon/"&gt;PyGrunn hackathon&lt;/a&gt;. I was lucky and from all the list of ideas, the
selected was one of mines! The slides generator, that finally we call
&lt;strong&gt;hovercraft&lt;/strong&gt;. Here is a small introduction about what I wanted:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A small platform to create slides and have them always associated to a web
with this possibilities:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Create an account with Google (or perhaps twitter, facebook...), but Google
seems the best option for me now.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Create or edit new slides related with this account. This slides
creator/editor will have the following functionalities:&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Select one image for background in fullscreen.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Write one or 2 lines of text that will always fulfill the width of the
slide.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Change the font family.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Have a permanent link to your slide (completely public for now).&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the hackathon we got something very similar to what I wanted, with some
small issues. But this post is not about what we did wrong! This post is about
which technologies did we use to finish the project and perhaps, if I am lucky,
start a discussion on why we did/didn't make a good choice.&lt;/p&gt;
&lt;div class="section" id="how-do-we-achieve-this"&gt;
&lt;h2&gt;How do we achieve this?&lt;/h2&gt;
&lt;div class="section" id="backend"&gt;
&lt;h3&gt;Backend&lt;/h3&gt;
&lt;p&gt;The backend of the application was almost inexistent, we only wanted to allow
the users to login with a Google account to have access to edit their slides.
Being a hackathon we didn't spend time adding &lt;abbr title="Create/Read/Update/Delete"&gt;CRUD&lt;/abbr&gt; functionalities to manage the users.&lt;/p&gt;
&lt;p&gt;If you want to delete your user, let me know, I will do it by hand :) It was
made with &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, Flask-OAuth for the authentication with Google and &lt;a class="reference external" href="http://redis.io/"&gt;redis&lt;/a&gt;
to store the presentations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frontend"&gt;
&lt;h3&gt;Frontend&lt;/h3&gt;
&lt;p&gt;The viewer was really simply too because from the beginning we wanted to play
with the editor (it was more funny). For doing it we used &lt;a class="reference external" href="http://lab.hakim.se/reveal-js/#/"&gt;revealjs&lt;/a&gt; to show
the presentation with slide effect and &lt;a class="reference external" href="http://fittextjs.com/"&gt;jquery-fittext&lt;/a&gt; to make it fullslide.&lt;/p&gt;
&lt;p&gt;Now the important part! We made the editor with &lt;a class="reference external" href="http://agonzalezro.github.com/backbonejs-underscore-small-intro.html"&gt;backbone and underscore&lt;/a&gt;, it
seems to us the better choice, since we will have 3 principal views:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The background chooser&lt;/dt&gt;
&lt;dd&gt;which is connection to &lt;a class="reference external" href="http://www.deviantart.com/"&gt;deviantart&lt;/a&gt; to perform a
query of good backgrounds for your slide. Then you can click on one of the
results and will be applied to the current slide.&lt;/dd&gt;
&lt;dt&gt;The font chooser&lt;/dt&gt;
&lt;dd&gt;which is loading some google fonts, we wanted to do this
automagically but we couldn't finish it at time. The behaviour is the same,
you choose a font and its applied to the current slide.&lt;/dd&gt;
&lt;dt&gt;The slide content&lt;/dt&gt;
&lt;dd&gt;that should be &lt;abbr title="What You See Is What You Get"&gt;WYSIWYG&lt;/abbr&gt;
but for now is on the middle, because we couldn't make the text bigger while
you are writing.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;And finally the deployment that was made with &lt;cite&gt;heroku&lt;/cite&gt; and &lt;cite&gt;redistogo&lt;/cite&gt; that
allows you to use a 5M non-persistant DB that is good for a demo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can see &lt;cite&gt;the list of all the projects&lt;/cite&gt; or...&lt;/li&gt;
&lt;li&gt;You can find all the &lt;a class="reference external" href="https://github.com/agonzalezro/hovercraft"&gt;source on github&lt;/a&gt; or...&lt;/li&gt;
&lt;li&gt;You can &lt;a class="reference external" href="http://nameless-spire-1402.herokuapp.com/"&gt;try a demo&lt;/a&gt; too!&lt;/li&gt;
&lt;li&gt;And if you are too lazy to try it, here you have an screenshot:&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="hovercraft.png"&gt;&lt;img alt="hovercraft.png" class="align-center" src="hovercraft.png" style="width: 66%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks"&gt;
&lt;h2&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;I really want to thank &lt;a class="reference external" href="http://www.paylogic.nl"&gt;Paylogic&lt;/a&gt; for letting us a place where to do the project
and for provide us food &amp;amp; beers. What a developer will develop without food and
beer?&lt;/p&gt;
&lt;p&gt;I want to thank too all the guys that &amp;quot;spend&amp;quot; the weekend with me having fun, but working hard too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The good point of all this editing is that thanks to backbone and thanks to the
backend guys is saved without any action needed. The idea of this full project
was:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Have fun!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Simplifying slide creation&lt;/li&gt;
&lt;li&gt;Make it really simply to share those slides.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I didn't want to go really depth into the development of this project, &lt;strong&gt;I only wanted to give a quick overview of what we made in two days.&lt;/strong&gt; But if you are really interested on something more explained, let me know on the comments and I will try to help you in all what I can.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="hackathon"></category><category term="pygrunn"></category><category term="paylogic"></category><category term="backbone"></category><category term="flask"></category><category term="slides"></category></entry><entry><title>backbone.js + underscore: small intro</title><link href="http://agonzalezro.github.com/backbonejs-underscore-small-intro.html" rel="alternate"></link><updated>2012-11-01T00:30:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2012-11-01:backbonejs-underscore-small-intro.html</id><summary type="html">&lt;p&gt;Today, &lt;a class="reference external" href="http://twitter.com/olegpidsadnyi/"&gt;Oleg&lt;/a&gt; gave a talk about backbone at
&lt;a class="reference external" href="http://paylogic.nl/"&gt;Paylogic&lt;/a&gt;. We were using it for a really fancy
application inside our backoffice, it was quite funny write it and Oleg
decided to share the knowledge.&lt;/p&gt;
&lt;p&gt;I used the techtalk to take some notes and, since this piece of code will
have no sense out of our backoffice, I've written a small example that you can
find as a &lt;a class="reference external" href="https://gist.github.com/3982819"&gt;gist&lt;/a&gt; on my github. I will use it to explain to you some of the
useful things that you can do with backbone and underscore. Feel free to
improve it.&lt;/p&gt;
&lt;p&gt;This is only a introductory post, if you want advance stuff you should go to
the &lt;a class="reference external" href="http://backbonejs.org/"&gt;backbone official documentation&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://underscorejs.org/"&gt;underscore
docs&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Backbone is really useful when you make complex GUIs on client side. You can
make your code like in a desktop app using events to handle the actions. It's
not needed to pass around instances of parents views, let's use only the
events for that purpose, and let the child decide.&lt;/p&gt;
&lt;p&gt;You have models too, that you can sync (or not) with the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="models"&gt;
&lt;h2&gt;Models&lt;/h2&gt;
&lt;p&gt;In backbone you can have local model and sync them with the server or with
local storage (not explained in this intro). In our example we will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a collection to save our objects (type Item) in.&lt;/li&gt;
&lt;li&gt;Create the model Item.&lt;/li&gt;
&lt;li&gt;Create 2 object type Item inside this collection.&lt;/li&gt;
&lt;li&gt;Render them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 3 points can be made only with these lines of code. It's really simple!
(after know how to do it :p):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Setting values in the objects With .set will trigger the event
change. You can silent it in case that needed, but it's really useful, for
example, to save it.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Second note&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;backbone is f***ing clever! Imagine, you are changing a name, if the
name has changed on the collection, the event will be raised, if not, it will
not. This means that if you are editing, but finally you change your mind and
you didn't made any change, the event will not be raised.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="events"&gt;
&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;They are really useful to remove dependencies between elements. For example,
with jQuery if you change a element from another, the first one needs to know
about the second. With backbone you can catch the event with the child element
and do whatever you want with it.&lt;/p&gt;
&lt;p&gt;On the example of my &lt;a class="reference external" href="https://gist.github.com/3982819"&gt;gist&lt;/a&gt; I show an alert box with the name of the element.
But you could, for example, change it to an editable input.&lt;/p&gt;
&lt;p&gt;This is the code of the example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ItemView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dblclick&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;onDoubleClick&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;onDoubleClick&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hey! Why do you click on &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Play with this :)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are binding the &lt;tt class="docutils literal"&gt;dblclick&lt;/tt&gt; event to the function &lt;tt class="docutils literal"&gt;onDoubleClick&lt;/tt&gt;. This
function will receive the event, and the event will have the target (in this
case the &lt;tt class="docutils literal"&gt;&amp;lt;li/&amp;gt;&lt;/tt&gt; that we are clicking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="underscore"&gt;
&lt;h2&gt;Underscore&lt;/h2&gt;
&lt;p&gt;It's really useful to Work with collections. In out example we are using it to
iterate over the items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;itemview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you read carefully this piece of code you will realize that we are
instantiating a new ItemView for each particular item, so it has its own
container element created on the fly, re-renderable each time when data is
updated and all events are delegated to this element.&lt;/p&gt;
&lt;p&gt;The amazing thing that you can do with underscore is use templates (yes, like
jinja or django-templates, but in JS)! And we are doing it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ItemView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#item-template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/template&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item-template&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="extra-ball"&gt;
&lt;h2&gt;Extra ball&lt;/h2&gt;
&lt;p&gt;Use &lt;tt class="docutils literal"&gt;_.debounce&lt;/tt&gt; to don't call the functions thousands of times, example
drag&amp;amp;dropping an element it will be useful.&lt;/p&gt;
&lt;p&gt;For example in our project we had to sort with drag and drop some elements of a
list, instead send this event in each drag movement, we made it after 200s
being quiet with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please comment your thoughts about the post. We are all here to learn, and it's
really easy that I made some mistake explaining this. Furhtermore, I know that
my English is not really good, so, I will apreciate constructive comments about
it too :)&lt;/p&gt;
&lt;p&gt;Enjoy it!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="backbone"></category><category term="undercore"></category><category term="javascript"></category><category term="gui"></category></entry></feed>