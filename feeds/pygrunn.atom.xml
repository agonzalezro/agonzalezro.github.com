<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Álex's blog</title><link href="http://agonzalezro.github.com/" rel="alternate"></link><link href="http://agonzalezro.github.com/feeds/pygrunn.atom.xml" rel="self"></link><id>http://agonzalezro.github.com/</id><updated>2012-11-06T19:30:00+01:00</updated><entry><title>Graphite, Carbon and Diamond</title><link href="http://agonzalezro.github.com/graphite-carbon-and-diamond.html" rel="alternate"></link><updated>2012-11-06T19:30:00+01:00</updated><author><name>Álex</name></author><id>tag:agonzalezro.github.com,2012-11-06:graphite-carbon-and-diamond.html</id><summary type="html">&lt;p&gt;Two days ago we my, sadly, last PyGrunn monthly meeting. Thanks to &lt;a class="reference external" href="http://www.linkedin.com/profile/view?id=17961952&amp;amp;locale=en_US&amp;amp;trk=tyah"&gt;Bram&lt;/a&gt; now
we know a little bit more about how to monitoring with Python applications.&lt;/p&gt;
&lt;p&gt;Below you will find the notes that I take to the people that couldn't assist to
the talk. But they are only that, some notes, don't expect to find a really cool
story on them. I am pretty sure that &lt;a class="reference external" href="/graphite.slides/graphite.html"&gt;the original slides made by Bram&lt;/a&gt; will help
you.&lt;/p&gt;
&lt;div class="section" id="why-graphite"&gt;
&lt;h2&gt;Why graphite?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dev friendly&lt;/li&gt;
&lt;li&gt;Ops friendly&lt;/li&gt;
&lt;li&gt;Growth friendly: very scalable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some important companies are using it: Instragram, Etsy, Github, &lt;a class="reference external" href="http://www.kalooga.com"&gt;Kalooga&lt;/a&gt; (this is the company where Bram is working :).&lt;/p&gt;
&lt;p&gt;It's a project created by &lt;a class="reference external" href="orbitz.com"&gt;Orbitz.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ecosystem"&gt;
&lt;h2&gt;Ecosystem&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Graphite&lt;/dt&gt;
&lt;dd&gt;The tool that makes the graphs.&lt;/dd&gt;
&lt;dt&gt;Carbon&lt;/dt&gt;
&lt;dd&gt;Colects the statistics.&lt;/dd&gt;
&lt;dt&gt;Whisper&lt;/dt&gt;
&lt;dd&gt;Metrics &lt;cite&gt;RRD (Round Robin database)&lt;/cite&gt;.&lt;/dd&gt;
&lt;dt&gt;Diamond&lt;/dt&gt;
&lt;dd&gt;It's the metrics collector, they are others: CollectD, Munin, Ganglia... Of
course, you can develop yours.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-you-gate-the-data-in"&gt;
&lt;h2&gt;How do you gate the data in?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create an HTTP connection to the server.&lt;/li&gt;
&lt;li&gt;Each line will be a data point.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want namespaces you can always use dots &lt;cite&gt;.&lt;/cite&gt;. Example: &lt;cite&gt;pygrunn.load
[load] [now]&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="improvements"&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;Why don't use statsd? It's a layer for Graphite that you can use to keep your
application running and send the data to statsd. If it can write it ok, if not,
you have a problem.&lt;/p&gt;
&lt;p&gt;The original implementation of StatsD is in Node.js but there are another
projects that do it with C (StatsD-c) or python (Bucky) or [write your prefered
language here].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uses"&gt;
&lt;h2&gt;Uses&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open a &lt;cite&gt;dev&lt;/cite&gt; file and write directly to it.&lt;/li&gt;
&lt;li&gt;Open HTTP connection.&lt;/li&gt;
&lt;li&gt;Use a statsd decorator.&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="plots"&gt;
&lt;h2&gt;Plots&lt;/h2&gt;
&lt;p&gt;You can plot data with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;CSV&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;You can do funny things as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check the registered users over past day in json data&lt;/li&gt;
&lt;li&gt;Keep track of your 404 errors&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="where-is-the-data-store"&gt;
&lt;h2&gt;Where is the data store?&lt;/h2&gt;
&lt;p&gt;They are stored in files, in case that you run out of space this data will be
stored on the Carbon cache until something happen to it.a&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functions"&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;You can filter results, for example mostDeviant (take a look to the slides to
see the screenshots that show the use).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-also-nice"&gt;
&lt;h2&gt;What's also nice?&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Sentry&lt;/dt&gt;
&lt;dd&gt;Error caching middleware that you can run with your WSGI application to
check the Exceptions and the stacktraces.&lt;/dd&gt;
&lt;dt&gt;Shinken&lt;/dt&gt;
&lt;dd&gt;It's also written in python and it's compatible with Nagios. It could be a
good complement to Graphite to show some alerts when the thing are really
wrong.&lt;/dd&gt;
&lt;dt&gt;New Relic&lt;/dt&gt;
&lt;dd&gt;It's a Web Application Performance Management (&lt;cite&gt;APM (Application
Performance Management&lt;/cite&gt;).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</summary><category term="graphite"></category><category term="carbon"></category><category term="diamond"></category><category term="monitoring"></category><category term="python"></category></entry></feed>