<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on // Álex Go{,5z}</title><link>https://agonzalezro.github.io/tags/python/</link><description>Recent content in python on // Álex Go{,5z}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://agonzalezro.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Closing 2016, a list of talks I gave</title><link>https://agonzalezro.github.io/posts/2016/</link><pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/2016/</guid><description>
&lt;figure class="left" >
&lt;img src="https://agonzalezro.github.io/rafa.jpg" alt="A cow" />
&lt;figcaption class="center" >Thanks @rais38 for the photo!&lt;/figcaption>
&lt;/figure>
&lt;p>We are almost at the end of January but I didn&amp;rsquo;t want to end the first month of the year without doing a small recap of the talks I gave last year.&lt;/p>
&lt;p>When I moved to Spain at the end of 2015 I said to myself that I didn&amp;rsquo;t want to forget the little English I knew so I needed to force myself to keep traveling outside of Spain and to do some public speaking. The public speaking bit is for two reason: keep forcing myself to speak English and&amp;hellip; to lose my fear about talking English in front of a bunch of people you don&amp;rsquo;t know about a tech that they probably know better than you.&lt;/p>
&lt;p>I could do it much better than I did, but I am happy with the results.&lt;/p>
&lt;h2 id="my-english-talks">My English talks&lt;/h2>
&lt;h3 id="custom-volume-plugins--kubeconhttpskubeconio">Custom Volume Plugins @ &lt;a href="https://kubecon.io">Kubecon&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=33VzHXuuRs4">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/custom-volume-plugins">slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>I prepared this talk a lot, but I was pretty nervous on stage I did a terrible job. Some people said that they learn a lot of new concepts, but they were just trying to be friendly :) Probably I underestimated the pressure behind a Kubecon talk and I will fix this in the future.&lt;/p>
&lt;h3 id="python-kubernetes-and-friends--pygrunnhttpwwwpygrunnorg">Python, Kubernetes and friends @ &lt;a href="http://www.pygrunn.org/">PyGrunn&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=0tsaMVoydDg">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/python-kubernetes-and-friends">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>I gave this in the best (IMHO, but I could be biased) Python conference in the Netherlands, it went pretty well, I knew the things I did pretty badly in my previous talk at Kubeconf and I tried to fix the problems. However, if you check the video and you can give me some advice, feel free.&lt;/p>
&lt;h3 id="from-pets-to-cattle-the-way-of-kubernetes">From pets to cattle, the way of Kubernetes&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=K_Kh4LMiiqQ">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/from-pets-to-cattle-the-way-of-kubernetes">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>This talk was in Spain, but since it was a big conference I gave it in English for non-Spanish speakers. I think the talk was ok, I got a 4 out 5 in their feedback tool, but it seems I didn&amp;rsquo;t attach the people because nobody asking anything at the end. Out of camera I got several questions tho.&lt;/p>
&lt;h2 id="and-the-spanish-ones">And the Spanish ones&lt;/h2>
&lt;p>All these talks were internal Jobandtalent talks for my ex-colleagues, I hope it helped them, they definitely helped me, it was a trusty environment and the questions were really interesting. You probably wouldn&amp;rsquo;t ask that much in a conference but it helps the speaker (in this case me) to improve.&lt;/p>
&lt;h3 id="go-101--jobandtalenthttpwwwjobandtalentcom">Go 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=zaywpuLV4BY">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/go-101-updated">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="kubernetes-101--jobandtalenthttpwwwjobandtalentcom">Kubernetes 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=5YmhMM_q4uI">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/kubernetes-101">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="docker-101--jobandtalenthttpwwwjobandtalentcom">Docker 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://speakerdeck.com/agonzalezro/docker-101">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>Out of that list I gave some other, for example, about &lt;a href="https://github.com/agonzalezro/goqui/blob/master/examples/neo4j_intro_slides.neo4j">Neo4J&lt;/a> and a workshop with my friend &lt;a href="https://twitter.com/ipedrazas">@ipedrazas&lt;/a> about Kubernetes &amp;amp; Docker, here, in Spain. Also, I started &lt;a href="https://meetup.com/mad-scalability">mad Scalability&lt;/a> and I am quite happy with about it!&lt;/p>
&lt;p>I will try to prepare some CFP in 2017, but as today I see it pretty difficult because of reasons :)&lt;/p>
&lt;p>As I said at the beginning of the post, one of the reasons why I tried to do public speaking is to improve at it, you if you have any advice &lt;a href="https://twitter.com/agonzalezro">share it with me&lt;/a> please!&lt;/p></description></item><item><title>How to deploy and update a python app using Kubernetes</title><link>https://agonzalezro.github.io/posts/oct_2015_djugl/</link><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/oct_2015_djugl/</guid><description>
&lt;p>Two days ago I gave a small talk in the &lt;a href="https://twitter.com/DJUGL">DJUGL (Django User Group London)&lt;/a> explaining how we could deploy a test application into Kubernetes. This post is going to explain something pretty similar, how to deploy a Flask app into Kubernetes and how to rolling update it.&lt;/p>
&lt;p>Before starting, you can find all the materials of this post in my &lt;a href="https://github.com/agonzalezro/k8s-py-example">k8s-py-example&lt;/a> repo.&lt;/p>
&lt;p>Download the app and build it twice, one for each of the version that you want to deploy. This versions will need to be tagged properly and sent to &lt;a href="https://hub.docker.com/">Docker Hub&lt;/a>. Basically the steps to follow are:&lt;/p>
&lt;pre>&lt;code>docker build -t agonzalezro/k8s-py-example .
docker tag agonzalezro/k8s-py-example:latest agonzalezro/k8s-py-example:0.1
# Change the code (src/app.py) a little bit to see the differences
docker build -t agonzalezro/k8s-py-example .
docker tag agonzalezro/k8s-py-example:latest agonzalezro/k8s/py-example:0.2
docker push agonzalezro/k8s-py-example
&lt;/code>&lt;/pre>
&lt;p>Now that all the work related with Docker is done, let&amp;rsquo;s take a look to the needed k8s files:&lt;/p>
&lt;p>&lt;strong>rc-0.1.yml&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>rc-0.2.yml&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>service.yml&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The &lt;code>rc&lt;/code> files are the definitions of your replication controllers, one of them using the version &lt;code>0.1&lt;/code> and the other the image &lt;code>0.2&lt;/code>. The service file is share since the application is going to be the same.&lt;/p>
&lt;p>Let&amp;rsquo;s run the first version of the app:&lt;/p>
&lt;pre>&lt;code>kubectl -f rc-0.1.yml -f service.yml --validate=false
# The validate tag is just needed because of a bug in current k8s
&lt;/code>&lt;/pre>
&lt;p>Now, if you do &lt;code>kubectl get services&lt;/code> you will see the external IP of your service. You can use it to check that it&amp;rsquo;s running and showing the code of the version &lt;code>0.1&lt;/code>.&lt;/p>
&lt;p>Cool! You have deployed your first k8s application, now, let&amp;rsquo;s update it:&lt;/p>
&lt;pre>&lt;code>kubectl rolling-update flaskapp-rc -f rc-0.2.yml
&lt;/code>&lt;/pre>
&lt;p>If you wait a little bit you will see in the logs what&amp;rsquo;s happening there. Let the command finish and you will have your &lt;code>0.2&lt;/code> version deployed having causing 0 downtime!&lt;/p>
&lt;p>As always, feel free to contact me here or use twitter: &lt;a href="https://twitter.com/agonzalezro">@agonzalezro&lt;/a>&lt;/p></description></item><item><title>Python and Scala smoke the peace pipe</title><link>https://agonzalezro.github.io/posts/pygrunn_2013/</link><pubDate>Mon, 13 May 2013 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/pygrunn_2013/</guid><description>
&lt;p>This was my talk on the &lt;a href="http://pygrunn.nl">PyGrunn&lt;/a> conference last
Friday.&lt;/p>
&lt;p>I was explaining how can you communicate services written in different
languages using &lt;a href="http://thrift.apache.org/">Apache Thrift&lt;/a> for that.&lt;/p>
&lt;p>In few days the videos will be available, but TBH, I don&amp;rsquo;t really know
if I will publish it here. It was not the first time that I talk in
public using English, but it will be the first time that it is
recorded&amp;hellip; I don&amp;rsquo;t really know if I want to see that! :D&lt;/p>
&lt;p>I really need to improve my speed talking for the next time. I thought
that I will not have enough time to explain all, so, my subconscious
decided that I should be talking as a machine gun.&lt;/p>
&lt;p>Below, you will find the slides, if not, &lt;a href="https://speakerdeck.com/agonzalezro/python-and-scala-smoke-the-peace-pipe">try this
link&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>PS: you can find the source code of the slides here
&lt;a href="https://github.com/agonzalezro/slides/tree/master/thrift">[1]&lt;/a> &amp;amp; the
source code of the demo here
&lt;a href="https://github.com/agonzalezro/thriftest">[2]&lt;/a>.&lt;/p>
&lt;p>Enjoy them!&lt;/p></description></item><item><title>codereview from the POV of a noob</title><link>https://agonzalezro.github.io/posts/codereview/</link><pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/codereview/</guid><description>
&lt;p>Hi g(irl|uy)s! I would like to start with a disclaimer:&lt;/p>
&lt;p>&lt;em>I am not (and I don&amp;rsquo;t pretend to be) a craftmanship trooper (they like
to be called like that isn&amp;rsquo;t?), senior engineer with more years of
experience that the technology has, guru, blablabla&amp;hellip;&lt;/em>&lt;/p>
&lt;p>&lt;em>I just want to show my opinion about this process (which I really
like!). But more important that share my opinion, is to know what is
yours, so, please, comment!&lt;/em>&lt;/p>
&lt;p>Today we had an interesting conversation at work about how we make and
how we should make our codereviews. My point of view is that there are
three different things to check:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Code syntax.&lt;/strong> It&amp;rsquo;s a part that should be 100% automagically done.
I usually work with python and I let this work to
&lt;a href="http://pypi.python.org/pypi/flake8">Flake8&lt;/a> on vim, but it&amp;rsquo;s always
good to have a git hook.&lt;/li>
&lt;li>&lt;strong>Reusability and maintainability.&lt;/strong> I am afraid that this is the
worst part to check, it&amp;rsquo;s a manual process and it is really
subjective. Some people can think that use itertools with 2 lambda
functions is pretty clear and comprehensible, other people can think
that this code is the result of a dirty mind developer.&lt;/li>
&lt;li>&lt;strong>Functionality.&lt;/strong> Automated test! All the test that you can, and of
course, they worst the time that you will spent developing them.
There are things that can not be easily tested but in that case
let&amp;rsquo;s suppose that you were clever enough to test them manually and
in the case that is possible you can show it to anybody else (this
really helps!).&lt;/li>
&lt;/ol>
&lt;p>As I said the point 1 can be (and should be) automated! It&amp;rsquo;s really easy
to do, the same way that &lt;a href="http://pypi.python.org/pypi/flake8">Flake8&lt;/a>
exists for python, I am pretty sure that you will have one for your
favourite language. It&amp;rsquo;s really painful get back a pull request just for
some spaces that are not in place.&lt;/p>
&lt;p>For the point 3, yep, let me jump the second for now. Unit testing,
integration testing, functional testing&amp;hellip; whatever you want, but try to
automate it. This + a CI server will make your live really &amp;ldquo;easy&amp;rdquo;!&lt;/p>
&lt;p>And finally, about the second point. Each developer have their way to do
the things, but usually there are some points that can be fixed and
sometimes because we don&amp;rsquo;t know, other times just because we are lazy
but we post code like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(a, b, c):
&lt;span style="color:#66d9ef">if&lt;/span> (a &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>is_authenticated() &lt;span style="color:#f92672">and&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>has_perm(&lt;span style="color:#e6db74">&amp;#39;write&amp;#39;&lt;/span>)
):
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(json&lt;span style="color:#f92672">.&lt;/span>dumps(&lt;span style="color:#e6db74">&amp;#39;{authorized: True, &amp;#39;&lt;/span>a&lt;span style="color:#e6db74">&amp;#39;: a}))&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(json&lt;span style="color:#f92672">.&lt;/span>dumps(&lt;span style="color:#e6db74">&amp;#39;{authorized: True, &amp;#39;&lt;/span>a&lt;span style="color:#e6db74">&amp;#39;: a}))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is just an example, but you should agree with me that it&amp;rsquo;s really
easy to improve. This is what, in my opinion should be more checked in
the reviews.&lt;/p>
&lt;p>This was just an example (please, remember that :D), but could be
improved with something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">proper_function_name&lt;/span>(proper_variable_name):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;This is an amazing function that will do just a thing.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> :param proper_variable_name: what I am?
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> :returns: An HttpResponse object with the following JSON content:
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> {&amp;#39;authorized&amp;#39;: bool,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#39;proper_variable_name: int}
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
is_authorized &lt;span style="color:#f92672">=&lt;/span> (
request&lt;span style="color:#f92672">.&lt;/span>user &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>is_authenticated() &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>has_perm(&lt;span style="color:#e6db74">&amp;#39;write-resource&amp;#39;&lt;/span>)
)
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(
json&lt;span style="color:#f92672">.&lt;/span>dumps({
&lt;span style="color:#e6db74">&amp;#39;authorized&amp;#39;&lt;/span>: is_authorized,
&lt;span style="color:#e6db74">&amp;#39;proper_variable_name&amp;#39;&lt;/span>: proper_variable_name
})
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Those were the improvements (again, remember that it&amp;rsquo;s just an example):&lt;/p>
&lt;ol>
&lt;li>Give a proper name to the function. Don&amp;rsquo;t be afraid, everybody has
autocompletion! :D&lt;/li>
&lt;li>Give a proper name to the vars.&lt;/li>
&lt;li>DOCUMENT! In this example, ready for Sphinx.&lt;/li>
&lt;li>Simplify the if statements, actually, after take a look you made it
dissapear.&lt;/li>
&lt;li>One return.&lt;/li>
&lt;/ol>
&lt;p>So, what&amp;rsquo;s your opinion? What do you think that is more important in a
codereview.&lt;/p></description></item></channel></rss>