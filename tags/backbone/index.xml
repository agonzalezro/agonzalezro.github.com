<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>backbone on // Álex Go{,5z}</title><link>https://agonzalezro.github.io/tags/backbone/</link><description>Recent content in backbone on // Álex Go{,5z}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 27 Nov 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://agonzalezro.github.io/tags/backbone/index.xml" rel="self" type="application/rss+xml"/><item><title>PyGrunn Winter Hackathon 2012</title><link>https://agonzalezro.github.io/posts/winter-hackathon-2012/</link><pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/winter-hackathon-2012/</guid><description>
&lt;p>Few days ago, actually, more than one week ago (but I was very busy :)
we made our first &lt;a href="http://paylogic.github.com/winter-hackathon/">PyGrunn
hackathon&lt;/a>. I was lucky
and from all the list of ideas, the selected was one of mines! The
slides generator, that finally we call &lt;strong>hovercraft&lt;/strong>. Here is a small
introduction about what I wanted:&lt;/p>
&lt;p>&lt;em>A small platform to create slides and have them always associated to a
web with this possibilities:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;em>Create an account with Google (or perhaps twitter, facebook&amp;hellip;), but Google seems the best option for me now.&lt;/em>&lt;/li>
&lt;li>&lt;em>Create or edit new slides related with this account. This slides creator/editor will have the following functionalities:&lt;/em>
&lt;ul>
&lt;li>&lt;em>Select one image for background in fullscreen.&lt;/em>&lt;/li>
&lt;li>&lt;em>Write one or 2 lines of text that will always fulfill the width of the slide.&lt;/em>&lt;/li>
&lt;li>&lt;em>Change the font family.&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Have a permanent link to your slide (completely public for now).&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>After the hackathon we got something very similar to what I wanted, with
some small issues. But this post is not about what we did wrong! This
post is about which technologies did we use to finish the project and
perhaps, if I am lucky, start a discussion on why we did/didn&amp;rsquo;t make a
good choice.&lt;/p>
&lt;h2 id="how-do-we-achieve-this">How do we achieve this?&lt;/h2>
&lt;h3 id="backend">Backend&lt;/h3>
&lt;p>The backend of the application was almost inexistent, we only wanted to
allow the users to login with a Google account to have access to edit
their slides. Being a hackathon we didn&amp;rsquo;t spend time adding CRUD
(Create/Read/Update/Delete) functionalities to manage the users.&lt;/p>
&lt;p>If you want to delete your user, let me know, I will do it by hand :) It
was made with &lt;a href="http://flask.pocoo.org/">Flask&lt;/a>, Flask-OAuth for the
authentication with Google and &lt;a href="http://redis.io/">redis&lt;/a> to store the
presentations.&lt;/p>
&lt;h3 id="frontend">Frontend&lt;/h3>
&lt;p>The viewer was really simply too because from the beginning we wanted to
play with the editor (it was more funny). For doing it we used
&lt;a href="http://lab.hakim.se/reveal-js/#/">revealjs&lt;/a> to show the presentation
with slide effect and &lt;a href="http://fittextjs.com/">jquery-fittext&lt;/a> to make it
fullslide.&lt;/p>
&lt;p>Now the important part! We made the editor with &lt;a href="http://agonzalezro.github.com/backbonejs-underscore-small-intro.html">backbone and
underscore&lt;/a>,
it seems to us the better choice, since we will have 3 principal views:&lt;/p>
&lt;dl>
&lt;dt>The background chooser&lt;/dt>
&lt;dd>which is connection to &lt;a href="http://www.deviantart.com/">deviantart&lt;/a> to
perform a query of good backgrounds for your slide. Then you can
click on one of the results and will be applied to the current
slide.&lt;/dd>
&lt;dt>The font chooser&lt;/dt>
&lt;dd>which is loading some google fonts, we wanted to do this
automagically but we couldn&amp;rsquo;t finish it at time. The behaviour is
the same, you choose a font and its applied to the current slide.&lt;/dd>
&lt;dt>The slide content&lt;/dt>
&lt;dd>that should be WYSIWYG (What You See Is What You Get) but for now is
on the middle, because we couldn&amp;rsquo;t make the text bigger while you
are writing.&lt;/dd>
&lt;/dl>
&lt;h3 id="deployment">Deployment&lt;/h3>
&lt;p>And finally the deployment that was made with heroku and redistogo that
allows you to use a 5M non-persistant DB that is good for a demo.&lt;/p>
&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>You can see the list of all the projects or&amp;hellip;&lt;/li>
&lt;li>You can find all the &lt;a href="https://github.com/agonzalezro/hovercraft">source on
github&lt;/a> or&amp;hellip;&lt;/li>
&lt;li>You can &lt;a href="http://nameless-spire-1402.herokuapp.com/">try a demo&lt;/a> too!&lt;/li>
&lt;li>And if you are too lazy to try it, here you have an screenshot:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://agonzalezro.github.io/hovercraft.png" alt="image">&lt;/p>
&lt;h2 id="thanks">Thanks!&lt;/h2>
&lt;p>I really want to thank &lt;a href="http://www.paylogic.nl">Paylogic&lt;/a> for letting us
a place where to do the project and for provide us food &amp;amp; beers. What a
developer will develop without food and beer?&lt;/p>
&lt;p>I want to thank too all the guys that &amp;ldquo;spend&amp;rdquo; the weekend with me having
fun, but working hard too!&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>The good point of all this editing is that thanks to backbone and thanks
to the backend guys is saved without any action needed. The idea of this
full project was:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Have fun!&lt;/strong>&lt;/li>
&lt;li>Simplifying slide creation&lt;/li>
&lt;li>Make it really simply to share those slides.&lt;/li>
&lt;/ol>
&lt;p>I didn&amp;rsquo;t want to go really depth into the development of this project,
&lt;strong>I only wanted to give a quick overview of what we made in two days.&lt;/strong>
But if you are really interested on something more explained, let me
know on the comments and I will try to help you in all what I can.&lt;/p></description></item><item><title>backbone.js + underscore: small intro</title><link>https://agonzalezro.github.io/posts/backbone/</link><pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/backbone/</guid><description>
&lt;p>Today, &lt;a href="http://twitter.com/olegpidsadnyi/">Oleg&lt;/a> gave a talk about
backbone at &lt;a href="http://paylogic.nl/">Paylogic&lt;/a>. We were using it for a
really fancy application inside our backoffice, it was quite funny write
it and Oleg decided to share the knowledge.&lt;/p>
&lt;p>I used the techtalk to take some notes and, since this piece of code
will have no sense out of our backoffice, I&amp;rsquo;ve written a small example
that you can find as a &lt;a href="https://gist.github.com/3982819">gist&lt;/a> on my
github. I will use it to explain to you some of the useful things that
you can do with backbone and underscore. Feel free to improve it.&lt;/p>
&lt;p>This is only a introductory post, if you want advance stuff you should
go to the &lt;a href="http://backbonejs.org/">backbone official documentation&lt;/a> &amp;amp;
&lt;a href="http://underscorejs.org/">underscore docs&lt;/a>.&lt;/p>
&lt;h2 id="why">Why?&lt;/h2>
&lt;p>Backbone is really useful when you make complex GUIs on client side. You
can make your code like in a desktop app using events to handle the
actions. It&amp;rsquo;s not needed to pass around instances of parents views,
let&amp;rsquo;s use only the events for that purpose, and let the child decide.&lt;/p>
&lt;p>You have models too, that you can sync (or not) with the server.&lt;/p>
&lt;h2 id="models">Models&lt;/h2>
&lt;p>In backbone you can have local model and sync them with the server or
with local storage (not explained in this intro). In our example we
will:&lt;/p>
&lt;ol>
&lt;li>Create a collection to save our objects (type Item) in.&lt;/li>
&lt;li>Create the model Item.&lt;/li>
&lt;li>Create 2 object type Item inside this collection.&lt;/li>
&lt;li>Render them.&lt;/li>
&lt;/ol>
&lt;p>The 3 points can be made only with these lines of code. It&amp;rsquo;s really
simple! (after know how to do it :p):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>();
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Items&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">Collection&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>
});
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">items&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Items&lt;/span>();
&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>([{&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>}, {&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>}]);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: Setting values in the objects With .set will trigger the event
change. You can silent it in case that needed, but it&amp;rsquo;s really
useful, for example, to save it.&lt;/p>
&lt;p>&lt;strong>Second note&lt;/strong>: backbone is f***ing clever! Imagine, you are changing a
name, if the name has changed on the collection, the event will be raised,
if not, it will not. This means that if you are editing, but finally
you change your mind and you didn&amp;rsquo;t made any change, the event will
not be raised.&lt;/p>
&lt;h2 id="events">Events&lt;/h2>
&lt;p>They are really useful to remove dependencies between elements. For
example, with jQuery if you change a element from another, the first one
needs to know about the second. With backbone you can catch the event
with the child element and do whatever you want with it.&lt;/p>
&lt;p>On the example of my &lt;a href="https://gist.github.com/3982819">gist&lt;/a> I show an
alert box with the name of the element. But you could, for example,
change it to an editable input.&lt;/p>
&lt;p>This is the code of the example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">View&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
...
&lt;span style="color:#a6e22e">events&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;dblclick&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;onDoubleClick&amp;#34;&lt;/span>
},
...
&lt;span style="color:#a6e22e">onDoubleClick&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">$&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>(&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>).&lt;span style="color:#a6e22e">text&lt;/span>());
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hey! Why do you click on &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>); &lt;span style="color:#75715e">//Play with this :)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are binding the &lt;code>dblclick&lt;/code> event to the function &lt;code>onDoubleClick&lt;/code>.
This function will receive the event, and the event will have the target
(in this case the &lt;code>&amp;lt;li/&amp;gt;&lt;/code> that we are clicking.&lt;/p>
&lt;h2 id="underscore">Underscore&lt;/h2>
&lt;p>It&amp;rsquo;s really useful to Work with collections. In out example we are using
it to iterate over the items:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">each&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">models&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">itemview&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>);
&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">el&lt;/span>).&lt;span style="color:#a6e22e">append&lt;/span>(&lt;span style="color:#a6e22e">itemview&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>().&lt;span style="color:#a6e22e">el&lt;/span>);
}, &lt;span style="color:#66d9ef">this&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you read carefully this piece of code you will realize that we are
instantiating a new ItemView for each particular item, so it has its own
container element created on the fly, re-renderable each time when data
is updated and all events are delegated to this element.&lt;/p>
&lt;p>The amazing thing that you can do with underscore is use templates (yes,
like jinja or django-templates, but in JS)! And we are doing it:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">View&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
...
&lt;span style="color:#a6e22e">template&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">template&lt;/span>(&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#item-template&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">html&lt;/span>()),
...
&lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">el&lt;/span>).&lt;span style="color:#a6e22e">html&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">template&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">toJSON&lt;/span>()));
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
},
...
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/template&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item-template&amp;#34;&lt;/span>&amp;gt;
&lt;span style="color:#f92672">&amp;lt;%=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">%&amp;gt;&lt;/span>
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="extra-ball">Extra ball&lt;/h2>
&lt;p>Use &lt;code>_.debounce&lt;/code> to don&amp;rsquo;t call the functions thousands of times, example
drag&amp;amp;dropping an element it will be useful.&lt;/p>
&lt;p>For example in our project we had to sort with drag and drop some
elements of a list, instead send this event in each drag movement, we
made it after 200s being quiet with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">debounce&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">pools&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
}, &lt;span style="color:#ae81ff">200&lt;/span>),
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please comment your thoughts about the post. We are all here to learn,
and it&amp;rsquo;s really easy that I made some mistake explaining this.
Furhtermore, I know that my English is not really good, so, I will
apreciate constructive comments about it too :)&lt;/p>
&lt;p>Enjoy it!&lt;/p></description></item></channel></rss>