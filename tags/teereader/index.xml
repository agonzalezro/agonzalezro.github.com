<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>teereader on // √Ålex Go{,5z}</title><link>https://agonzalezro.github.io/tags/teereader/</link><description>Recent content in teereader on // √Ålex Go{,5z}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 13 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://agonzalezro.github.io/tags/teereader/index.xml" rel="self" type="application/rss+xml"/><item><title>How to read a Reader twice</title><link>https://agonzalezro.github.io/posts/tee_reader/</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/tee_reader/</guid><description>
&lt;p>Some time ago I read about &lt;a href="https://golang.org/pkg/io/#TeeReader">&lt;code>TeeReader&lt;/code>&lt;/a> but to be fair, I didn&amp;rsquo;t give it that much thought. However, few month back I saw &lt;a href="https://www.youtube.com/watch?v=c5ufcpTGIJM&amp;amp;list=PL64wiCrrxh4Jisi7OcCJIUpguV_f5jGnZ">a video&lt;/a> by &lt;a href="https://twitter.com/francesc">@francesc&lt;/a> and his nice use case and I wrote down a new item in my mental TODO list about things I wanted to use.&lt;/p>
&lt;p>Last week I had the chance to do it; we have a service that requires reading a request body to check for a &lt;code>Status&lt;/code> field and also it requires to store the raw request.&lt;/p>
&lt;p>What we were doing in the first iteration was unmarshalling the full payload into a struct and marshal the struct as the raw data. This process wasn&amp;rsquo;t very reliable because it&amp;rsquo;s pretty easy to lose information in during the un/marshalling.&lt;/p>
&lt;p>To solve it we had two options:&lt;/p>
&lt;ol>
&lt;li>Read all the body, store it in a variable and use that var as raw data and as an input to the &lt;code>Unmarshal&lt;/code> call. Not very neat as you are not taking advantages of the &lt;a href="https://blog.golang.org/json-and-go#TOC_7.">decoding streams&lt;/a>.&lt;/li>
&lt;li>Use the &lt;code>TeeReader&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Here is an example (not with real names tho.) of what we end up doing:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Status&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getStatusAndReason&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>
&lt;span style="color:#a6e22e">tee&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">TeeReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">buf&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">payload&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">tee&lt;/span>).&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">payload&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">payload&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(), &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I hope you liked our use case, and in case you would do in any other way, please, &lt;a href="https://twitter.com/agonzalezro">do let me know&lt;/a>! It&amp;rsquo;s always nice learning from your experiences üòÄ&lt;/p></description></item></channel></rss>