<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dev on // √Ålex Go{,5z}</title><link>https://agonzalezro.github.io/tags/dev/</link><description>Recent content in dev on // √Ålex Go{,5z}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://agonzalezro.github.io/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Projects I didn't do in 2017</title><link>https://agonzalezro.github.io/posts/projects_2017/</link><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/projects_2017/</guid><description>
&lt;p>If you know me you probably know that I am always complaining that I want to start some pet project that could give me some kind of income.
The income is a nice incentive, but not for the income itself if not because it would be really nice to have somebody paying for a project that you started from scratch.&lt;/p>
&lt;p>In 2017 I had some ideas that after further investigation or after just chatting with some friend about them I decided to not even start or think about them again.&lt;/p>
&lt;p>Why am I sharing them? Because to be fair I don&amp;rsquo;t think I will never start them, also, maybe we can start a good brainstorm here!&lt;/p>
&lt;figure class="left" >
&lt;img src="https://agonzalezro.github.io/lazy-cat.jpg" alt="A lazy cat" />
&lt;figcaption class="center" >Lazy cat proudly brought to you by huffingtonpost&lt;/figcaption>
&lt;/figure>
&lt;h2 id="tool-to-review-tweets">Tool to review Tweets&lt;/h2>
&lt;p>When I was working at Jobandtalent we had several problems deciding what to tweet in the &lt;a href="https://twitter.com/jobandtalentEng">eng account&lt;/a>. This toold could help you to decide what to publish, fix errors on the tweets, etc (as you would do with Github PRs).&lt;/p>
&lt;p>In the future, it should be available as well for Instagram, Facebook, etc..&lt;/p>
&lt;p>Also, it should support bots via API to add comments, for example, about the grammar of the publication.&lt;/p>
&lt;p>I started this one here: &lt;a href="http://chimpin.io/">chimpin.io&lt;/a> but the interest was near to zero.&lt;/p>
&lt;h2 id="adventure-tech-book">Adventure tech book&lt;/h2>
&lt;p>A tech book in the style of &lt;a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure">&amp;ldquo;Choose your own adventure&amp;rdquo;&lt;/a>.&lt;/p>
&lt;p>It would be a book that would immerse you in an adventure where you should take tech decisions: would you use git or rather copy/paste the folder adding a suffix? One of them will end up in dead, you decide.&lt;/p>
&lt;h2 id="search-adventures">Search adventures&lt;/h2>
&lt;p>Something like booking but for activities, ex: I want to do karting in Madrid next Saturday, show me the deals.&lt;/p>
&lt;p>It would scrape the deals from different sources (not sure if it would even be legal, but I didn&amp;rsquo;t give it that much thought).&lt;/p>
&lt;h2 id="track-your-friends">Track your friends&lt;/h2>
&lt;p>I am pretty bad at keeping in touch with my friends/colleagues. This tool will remember you through a simple algorithm when you need to do it! But&amp;hellip; maybe I should fix myself and not use an app like this one üò¨&lt;/p>
&lt;h2 id="status-page">Status page&lt;/h2>
&lt;p>Yet another application that let you know create a status page for your site.
It should be reliable, support theming and have nice graphs about the uptimes.&lt;/p>
&lt;h2 id="logstash-rescuetime">Logstash rescuetime&lt;/h2>
&lt;p>I use &lt;a href="https://www.rescuetime.com/">rescuetime&lt;/a> to track where do I spend my time with the computer. I thought that having that information in logstash would help me to create nice dashboards about my performance.&lt;/p>
&lt;p>Probably I would spend more time creating the nice dashboards than doing real job.&lt;/p>
&lt;h2 id="crypto-present">Crypto present&lt;/h2>
&lt;p>Nice real life packaging for cryptos. Imagine you are going to a birthday and instead of giving a 20 bucks present you give them a nice package with a hash code that represent its crypto? Wouldn&amp;rsquo;t that be nice? (Or not, that' the problem with crypto).&lt;/p>
&lt;h2 id="starter-pack-for-wood">Starter pack for wood&lt;/h2>
&lt;p>Sell packs to start working with wood. For example: a knife + a piece of wood + some instruction to create a spoon. All of it presented in a beautful package.&lt;/p>
&lt;p>The problem with this is that the recurrent users after they have the tools is going to be minimal.&lt;/p>
&lt;h2 id="web-for-creating-real-life-exams">Web for creating real life exams&lt;/h2>
&lt;p>Teachers spend a lot of time preparing their exams, this tool would help them (collaborative) to tag exercises and the time it needs to be done. With a proper base of users they could plug&amp;amp;play the exams.&lt;/p>
&lt;p>Imagine a Spanish teacher that want to do an exam about &amp;ldquo;infinitive form&amp;rdquo;, the tool could show some exercise and he/she will decide what to use and how many do they need depending on the time the exam should take.&lt;/p>
&lt;p>I have some other ideas but they are fully techie so not that interesting for my purpose: ansible vendor tool, a Kubernetes bot for &lt;a href="agonzalezro.github.com/botella">botella&lt;/a> (&lt;a href="https://github.com/agonzalezro/agonzalezro.github.io/blob/kubernetes-for-botella/content/kubernetes/kubernetes-for-botella.md">this one is almost done&lt;/a>, but the usability isn&amp;rsquo;t that good üòÖ), &lt;code>pprof&lt;/code> exporter for Prometheus, ditto for Nats&amp;hellip;&lt;/p></description></item><item><title>How to read a Reader twice</title><link>https://agonzalezro.github.io/posts/tee_reader/</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/tee_reader/</guid><description>
&lt;p>Some time ago I read about &lt;a href="https://golang.org/pkg/io/#TeeReader">&lt;code>TeeReader&lt;/code>&lt;/a> but to be fair, I didn&amp;rsquo;t give it that much thought. However, few month back I saw &lt;a href="https://www.youtube.com/watch?v=c5ufcpTGIJM&amp;amp;list=PL64wiCrrxh4Jisi7OcCJIUpguV_f5jGnZ">a video&lt;/a> by &lt;a href="https://twitter.com/francesc">@francesc&lt;/a> and his nice use case and I wrote down a new item in my mental TODO list about things I wanted to use.&lt;/p>
&lt;p>Last week I had the chance to do it; we have a service that requires reading a request body to check for a &lt;code>Status&lt;/code> field and also it requires to store the raw request.&lt;/p>
&lt;p>What we were doing in the first iteration was unmarshalling the full payload into a struct and marshal the struct as the raw data. This process wasn&amp;rsquo;t very reliable because it&amp;rsquo;s pretty easy to lose information in during the un/marshalling.&lt;/p>
&lt;p>To solve it we had two options:&lt;/p>
&lt;ol>
&lt;li>Read all the body, store it in a variable and use that var as raw data and as an input to the &lt;code>Unmarshal&lt;/code> call. Not very neat as you are not taking advantages of the &lt;a href="https://blog.golang.org/json-and-go#TOC_7.">decoding streams&lt;/a>.&lt;/li>
&lt;li>Use the &lt;code>TeeReader&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Here is an example (not with real names tho.) of what we end up doing:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Status&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getStatusAndReason&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>
&lt;span style="color:#a6e22e">tee&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">TeeReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">buf&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">payload&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">tee&lt;/span>).&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">payload&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">payload&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(), &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I hope you liked our use case, and in case you would do in any other way, please, &lt;a href="https://twitter.com/agonzalezro">do let me know&lt;/a>! It&amp;rsquo;s always nice learning from your experiences üòÄ&lt;/p></description></item><item><title>IoT hackathon with Intel Edison and Go</title><link>https://agonzalezro.github.io/posts/edison_hackathon/</link><pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/edison_hackathon/</guid><description>
&lt;p>I spent last weekend in a hackathon organised by Intel to show their Intel
Edison platform. I can just say that it was awesome, the quality of the
projects, the prizes, the food, the freebies (yes, they gave us an Intel
Edison)&amp;hellip;&lt;/p>
&lt;p>But this post is not about that, I want to explain my project and how I made
Golang work in an Intel Edison thanks to &lt;a href="http://gobot.io/">gobot&lt;/a>.&lt;/p>
&lt;p>As you are already aware, Go easily supports cross compiling creating a binary
that you can use in your other devices. In this case, the Intel Edison is (by
default) a Linux distribution with i386 architecture.&lt;/p>
&lt;h2 id="what-did-i-do">What did I do?&lt;/h2>
&lt;p>I did a simple project to track the happiness of the assistant to a conference:
they can vote if it was a good one ro not &amp;amp; the Edison is also tracking the
clapping. All this information is stored into a
&lt;a href="https://influxdb.com/">InfluxDB&lt;/a> and I was using
&lt;a href="http://grafana.org/">Grafana&lt;/a> to demo it:&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/iot_grafana.png" alt="image">&lt;/p>
&lt;p>Ok, let&amp;rsquo;s start!&lt;/p>
&lt;h2 id="first-step-setup-the-wifi">First step: setup the wifi&lt;/h2>
&lt;p>After you connect the Edison you will have a new decive in &lt;code>/dev/&lt;/code> with the
form: &lt;code>/dev/tty.usbserial-...&lt;/code>. You can just use screen to connect to it, in my
case:&lt;/p>
&lt;pre>&lt;code>screen /dev/tty.usbserial-A903BU3J 115200 -L
&lt;/code>&lt;/pre>
&lt;p>Inside the machine:&lt;/p>
&lt;pre>&lt;code>configure_edison --wifi
&lt;/code>&lt;/pre>
&lt;p>You could as well use &lt;code>--setup&lt;/code> if you want to change the name, password, etc&amp;hellip;&lt;/p>
&lt;p>Cool! Now we have the device in out network, let&amp;rsquo;s see the IP with &lt;code>ifconfig&lt;/code>
and copy/paste it somewhere.&lt;/p>
&lt;h2 id="second-step-code">Second step: Code!&lt;/h2>
&lt;p>As I said before I was using the gobot framework. This framework easily allows
you to access to the GPIO that I&amp;rsquo;ve been using in the Edison (buttons, lights &amp;amp;
sound sensor).&lt;/p>
&lt;p>Here is a snippet:&lt;/p>
&lt;pre>&lt;code>gbot := gobot.NewGobot()
edisonAdaptor := edison.NewEdisonAdaptor(&amp;quot;edison&amp;quot;)
buttonPositive := gpio.NewButtonDriver(edisonAdaptor, &amp;quot;button_positive&amp;quot;, &amp;quot;4&amp;quot;)
...
robot := gobot.NewRobot(
&amp;quot;buttonBot&amp;quot;,
[]gobot.Connection{edisonAdaptor},
[]gobot.Device{buttonPositive, buttonNegative, redLed, greenLed, blueLed, soundSensor},
work,
)
&lt;/code>&lt;/pre>
&lt;p>&lt;code>work&lt;/code> is a loop where you can heard for the events created by the devices.&lt;/p>
&lt;p>If you want to see the full code: &lt;a href="https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/main.go">https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/main.go&lt;/a>&lt;/p>
&lt;h2 id="third-step-compile-deploy--run">Third step: compile, deploy &amp;amp; run&lt;/h2>
&lt;p>Crosscompile it. I was using &lt;a href="https://github.com/mitchellh/gox">gox&lt;/a> but you
can use the default tools for that as well. In my case:&lt;/p>
&lt;pre>&lt;code>gox -arch=&amp;quot;386&amp;quot; -os=&amp;quot;linux&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>This will generate a file called &lt;code>project_linux_386&lt;/code> that is what you will need
to copy to the Edison.&lt;/p>
&lt;p>To copy it you just need a simple scp:&lt;/p>
&lt;pre>&lt;code>scp project_linux_i386 root@[the_edison_ip]:/home/root/my_program
&lt;/code>&lt;/pre>
&lt;p>And to run it you can ssh and manually run it or as I was doing:&lt;/p>
&lt;pre>&lt;code>ssh root@[the_edison_ip] /home/root/my_program
&lt;/code>&lt;/pre>
&lt;p>I&amp;rsquo;ve automated this process in a
&lt;a href="https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/Makefile">Makefile&lt;/a>.&lt;/p>
&lt;p>Also, feel free to check the
&lt;a href="https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/README.md">README.md&lt;/a>
with a better explanation about what my project was.&lt;/p>
&lt;p>Any question? Reach me on twitter as
&lt;a href="http://twitter.com/agonzalezro">@agonzalezro&lt;/a> or just post a comment here.&lt;/p></description></item><item><title>Graph your meetup.com group with Neo4J and some Go</title><link>https://agonzalezro.github.io/posts/gotagmee/</link><pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/gotagmee/</guid><description>
&lt;p>Last days I&amp;rsquo;ve been spending sometime in a small project for fun. Sadly I
couldn&amp;rsquo;t do &lt;a href="https://twitter.com/agonzalezro/status/567823851791589376">anything for
production&lt;/a> so I
hacked &lt;a href="https://github.com/agonzalezro/gotagmee">gotagmee&lt;/a> which is a tiny
thingy that will created some goroutines to get all the members in a
&lt;a href="http://meetup.com">meetup.com&lt;/a> group with their interests and store them in a
Neo4J DB as &lt;code>Member&lt;/code> or &lt;code>Topic&lt;/code> entities with their respective relations.&lt;/p>
&lt;p>I wrote this because I wanted to get the data, but then I realised that this
piece of code is pretty neat (check the github repo for the original):&lt;/p>
&lt;pre>&lt;code>membersChan := make(chan db.Member, 1)
go api.Members(membersChan)
db, _ := db.NewDB(*neo4jDB)
for m := range membersChan {
db.Store(m)
}
&lt;/code>&lt;/pre>&lt;p>Basically I am creating a channel that is going to be used to receive the
members (1 by 1) whenever one of the subroutines scraping the API have one
ready. Perhaps there are better ways to do it, but I really like it :)&lt;/p>
&lt;p>Let&amp;rsquo;s go to the important part: &lt;strong>the data&lt;/strong>. I&amp;rsquo;ve used the code to extract
the data of the meetup that I co-organize here at London, the &lt;a href="http://www.meetup.com/Go-London-User-Group">Go London User
Group&lt;/a> if you are interested, I
could share with you a dump. For this example I was just interested in the
users and topics, but if you want, change it to get more data:
&lt;a href="http://www.meetup.com/meetup_api/docs/2/members/">http://www.meetup.com/meetup_api/docs/2/members/&lt;/a>&lt;/p>
&lt;p>We knew this already, but how many users do we have, easy peasy:&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n:Member) return count(n);
+----------+
| count(n) |
+----------+
| 671 |
+----------+
1 row
27 ms
&lt;/code>&lt;/pre>&lt;p>But perhaps the number of topic that our users follow is not (was not) as easy
to know:&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n:Topic) return count(n);
+----------+
| count(n) |
+----------+
| 1204 |
+----------+
1 row
30 ms
&lt;/code>&lt;/pre>&lt;p>I know that I am part of that meeting, what do I &amp;ldquo;like&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n)-[]-(t) where n.name =~ &amp;quot;Alexandre.*&amp;quot; return count(t);
+----------+
| count(t) |
+----------+
| 17 |
+----------+
1 row
255 ms
&lt;/code>&lt;/pre>&lt;p>I think that I didn&amp;rsquo;t impress anybody until here, but one of the ideas behind
graph DBs is easily find connections between entities, for example what do I
have in common with my friend &lt;a href="http://twitter.com/ipedrazas">@ipedrazas&lt;/a>? I
know that he likes beers as me, but I am talking about meetup.com relations,
let&amp;rsquo;s see!&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n)-[]-(t:Topic)-[]-(m) where n.name =~ &amp;quot;Alexandre.*&amp;quot; and m.name =~ &amp;quot;Ivan Pedrazas&amp;quot; return t.name;
+----------------------+
| t.name |
+----------------------+
| &amp;quot;Open Source&amp;quot; |
| &amp;quot;Programming&amp;quot; |
| &amp;quot;Mobile Development&amp;quot; |
| &amp;quot;golang&amp;quot; |
+----------------------+
4 rows
91 ms
&lt;/code>&lt;/pre>&lt;p>Nice! But if you want to do it beautiful for your boss, you could as well use Cypher:&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/dev/meetup_neo4j_example.png" alt="meetup_neo4j_example">&lt;/p>
&lt;p>Now imagine that I want to target the interest of my group by the things that
they like more, which ones are those?&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match ()-[r]-&amp;gt;(t:Topic) with t, count(r) as rel return t.name order by rel desc limit 10;
+------------------------+
| t.name |
+------------------------+
| &amp;quot;Programming&amp;quot; |
| &amp;quot;Software Development&amp;quot; |
| &amp;quot;Open Source&amp;quot; |
| &amp;quot;New Technology&amp;quot; |
| &amp;quot;Technology&amp;quot; |
| &amp;quot;Web Development&amp;quot; |
| &amp;quot;Startup Businesses&amp;quot; |
| &amp;quot;Big Data&amp;quot; |
| &amp;quot;Cloud Computing&amp;quot; |
| &amp;quot;Internet Startups&amp;quot; |
+------------------------+
10 rows
99 ms
&lt;/code>&lt;/pre>&lt;p>They were kinda clear for this kind of geeky meetup :)&lt;/p>
&lt;p>Hope that you enjoyed, and if you have any more question or queries for the data,
ping me here or at &lt;a href="http://twitter.com/agonzalezro">@agonzalezro&lt;/a>.&lt;/p></description></item><item><title>How I prepared my Mac to make some Docker development</title><link>https://agonzalezro.github.io/posts/docker-env/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/docker-env/</guid><description>
&lt;p>This post is about &lt;strong>how I did it!&lt;/strong> not about a standard way or something like
that, if you use any other way I would be happy to hear it on the comments.&lt;/p>
&lt;p>I usually use &lt;code>boot2docker&lt;/code> on my machine to run container, but it looks like
it was misbehaving a little bit when I was trying to create the binary of my
dev branch with:&lt;/p>
&lt;pre>&lt;code>$ make binary
&lt;/code>&lt;/pre>
&lt;p>Actually, it was just not creating it.&lt;/p>
&lt;p>I could also create some cross-compiled binaries but that didn&amp;rsquo;t work either.
It was a really weird situation because I couldn&amp;rsquo;t find the path that it was
saying that it was creating. Not in my machine, not in my boot2docker VM
either. So, after some frustrating time I decided to go with vagrant.&lt;/p>
&lt;h2 id="what-i-wanted">What I wanted?&lt;/h2>
&lt;ul>
&lt;li>My vim! I couldn&amp;rsquo;t live without that.&lt;/li>
&lt;li>My ssh keys for github and similar without copying them to the vagrant box.&lt;/li>
&lt;/ul>
&lt;h2 id="how-i-did-it">How I did it?&lt;/h2>
&lt;h3 id="vagrant">vagrant&lt;/h3>
&lt;p>It was a simple process after you have clear what you really want to do:&lt;/p>
&lt;pre>&lt;code>$ cd myawesomebox
$ vagrant init # Edit the file if you want more memory or similar
$ git clone git@github.com:YOUR_USERNAME/docker
$ vagrant ssh
$ sudo su -
&lt;/code>&lt;/pre>
&lt;p>What we did there? We have created a &lt;code>Vagrantfile&lt;/code> and we clone the repo in the
same folder. Thanks to that when we are inside the vagrant box (with &lt;code>vagrant ssh&lt;/code>) we will be able to access to it on the path &lt;code>/vagrant&lt;/code> of your box.&lt;/p>
&lt;p>The advantage of this approach is that you can access to all the docker code
from your host machine in the path &lt;code>myawesomebox&lt;/code> so you will not need to copy
any key, any conf or anything like that.&lt;/p>
&lt;h3 id="docker">docker&lt;/h3>
&lt;p>Now it&amp;rsquo;s time to update your docker server and create your on docker client
(remember that we are logged in as root on that box):&lt;/p>
&lt;pre>&lt;code># cd /vagrant/docker
# make build&amp;amp;&amp;amp;make binary
# service docker stop
# cp bundles/1.3.2-dev/binary/docker-1.3.2-dev /usr/bin/docker
# service docker start
&lt;/code>&lt;/pre>
&lt;p>Where &lt;code>1.3.2&lt;/code> is the current version at the time of writing &amp;amp;
&lt;code>/usr/bin/docker&lt;/code> is your old docker server binary.&lt;/p>
&lt;p>Now you are running a new server, but where is the client?! Easy peasy, on the
same place that the server was originally:&lt;/p>
&lt;pre>&lt;code># bundles/1.3.2-dev/binary/docker
...
&lt;/code>&lt;/pre>
&lt;p>I usually alias it to the letter &lt;code>d&lt;/code> to access to it quicker without moving
stuff around:&lt;/p>
&lt;pre>&lt;code># alias d=&amp;quot;`pwd`/bundles/1.3.2-dev/binary/docker&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>I would say that develop some nice pull request? Or at least try! It&amp;rsquo;s fun
anyway :)&lt;/p>
&lt;p>I went through all this pain while &lt;a href="http://twitter.com/eloycoto">@eloycoto&lt;/a> &amp;amp;
me were developing a &lt;a href="https://github.com/docker/docker/pull/9415">small PR to show vertical &lt;code>ps&lt;/code>
outputs&lt;/a>, so, thanks mate!&lt;/p>
&lt;p>If you have any question or you think that my way of doing this stinks, please,
let me know! I would really, really appreciate it.&lt;/p></description></item><item><title>How to manage multiple errors in Go</title><link>https://agonzalezro.github.io/posts/errors/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/errors/</guid><description>
&lt;p>Let me start with a disclaimer, I don&amp;rsquo;t really know if this is a pattern that
must be followed or it&amp;rsquo;s just a weird idea coming out of my head.&lt;/p>
&lt;p>The second disclaimer is that I am pretty sure that I am not the only mind that
thought about this, but I didn&amp;rsquo;t see it in use in any place. Why?&lt;/p>
&lt;p>Error handling in Go has his advantages and disadvantages, for me, the most
important disadvantage is the &amp;ldquo;weird&amp;rdquo; way of checking the error just after the
line that can raise it.&lt;/p>
&lt;p>I&amp;rsquo;ve experimenting a little bit with it and I found this solution:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Basically, with the default approach you would need 2 new lines as follows:&lt;/p>
&lt;pre>&lt;code>if err != nil {
...
}
&lt;/code>&lt;/pre>&lt;p>I find this pattern pretty useful for things like http handlers or so.&lt;/p>
&lt;p>Also, you are able to add a &lt;code>switch&lt;/code> at the end to check the kind of error and
keep your code more &amp;ldquo;organized&amp;rdquo;.&lt;/p>
&lt;p>What do you think? Should I use it in every place I can? Do you do it in a
better way?&lt;/p></description></item><item><title>Draw (and more) your architecture with Neo4J</title><link>https://agonzalezro.github.io/posts/neo4j_architecture/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/neo4j_architecture/</guid><description>
&lt;p>As some of you already know I work at &lt;a href="http://greenmangaming.com">Green Man
Gaming&lt;/a> (mainly at the
&lt;a href="http://playfire.com">playfire&lt;/a> project). We were planning to do some changes
in our architecture but it&amp;rsquo;s extremely hard to have an idea of all our services
and DBs in just a piece of A4 paper. I was trying, trust me, but it was
impossible.&lt;/p>
&lt;p>When I started with this task I did it with
&lt;a href="https://www.lucidchart.com">lucidchart&lt;/a>, after it got so messy I moved to
&lt;a href="http://www.graphviz.org/">graphviz&lt;/a>, but even with the usual good graphs that
I get from graphviz it was impossible to get something readable this time.&lt;/p>
&lt;p>So, it happened! I remembered &lt;a href="http://ivan.pedrazas.me/?p=280">this post&lt;/a> made
by my friend Iv√°n and I thought, why not?&lt;/p>
&lt;p>Sadly, this post is not going to show any real data from GMG, but if you are
interested it&amp;rsquo;s the moment to apply because we are hiring &amp;amp; we have the graphs
around all the whiteboard in the office! Just grab me an email.&lt;/p>
&lt;h2 id="what-do-i-need">What do I need?&lt;/h2>
&lt;p>Basically, you just need Neo4J. You can install it however you want, I&amp;rsquo;ve just
run a Docker container with it:&lt;/p>
&lt;pre>&lt;code>docker run -d -p 7474:7474 tpires/neo4j
&lt;/code>&lt;/pre>
&lt;p>Now, if you access to your docker container at http://localhost:7474 (or using
the host from &lt;code>boot2docker ip&lt;/code> if you run docker with boot2docker) you will see
the cypher shell which is one of the ways that you can use to interact with
your DB.&lt;/p>
&lt;h2 id="what-i-am-going-to-draw">What I am going to draw?&lt;/h2>
&lt;p>In my case, and for a POC, I&amp;rsquo;ve written the following entities:&lt;/p>
&lt;ul>
&lt;li>Person&lt;/li>
&lt;li>Technology&lt;/li>
&lt;li>Service&lt;/li>
&lt;/ul>
&lt;p>You could write some other entities as for example DBs.&lt;/p>
&lt;p>The connections here are kinda clear: a person knows a technology which is
used to write a service that use a DB as backend, so, let&amp;rsquo;s write it!&lt;/p>
&lt;p>To create entities the syntax is as follow:&lt;/p>
&lt;pre>&lt;code>CREATE (variable:Type{attributes})
&lt;/code>&lt;/pre>
&lt;p>And to create Relations (one of the ways):&lt;/p>
&lt;pre>&lt;code>CREATE (variable1)-[:RELATION_NAME]-&amp;gt;(variable2)
&lt;/code>&lt;/pre>
&lt;p>You will understand this better after we start creating our entities.&lt;/p>
&lt;p>Create your engineers:&lt;/p>
&lt;pre>&lt;code>CREATE
(dev1:Person{name:&amp;quot;Alex&amp;quot;}),
(dev2:Person{name:&amp;quot;Maria&amp;quot;}),
(dev3:Person{name:&amp;quot;Pepe&amp;quot;}),
&lt;/code>&lt;/pre>
&lt;p>Before the : you can see that we have defined a variable to refer to this
just-created entities. All the nodes that we are creating here are of type
Person and each of them have a different name.&lt;/p>
&lt;p>To create the relationships between Technology and Person, we define the
technology using the same method that we used to create the Person, but we add
the relationships:&lt;/p>
&lt;pre>&lt;code>...
(python:Technology{name:&amp;quot;Python&amp;quot;}),
(go:Technology{name:&amp;quot;Go&amp;quot;}),
(dev1)-[:KNOWS]-&amp;gt;(python),
(dev1)-[:KNOWS]-&amp;gt;(go),
(dev2)-[:KNOWS]-&amp;gt;(python),
(dev3)-[:KNOWS]-&amp;gt;(go),
&lt;/code>&lt;/pre>
&lt;p>And finally, we add our services:&lt;/p>
&lt;pre>&lt;code>...
(service1:Service{name:&amp;quot;Service #1&amp;quot;}),
(service2:Service{name:&amp;quot;Service #2&amp;quot;}),
(service1)-[:CONNECTS]-&amp;gt;(service2),
(service1)-[:WRITTEN_WITH]-&amp;gt;(go),
(service2)-[:WRITTEN_WITH]-&amp;gt;(python)
&lt;/code>&lt;/pre>
&lt;h2 id="querying-for-drawing">Querying for drawing&lt;/h2>
&lt;p>Now, you can run all the script and we can see the result. For the first output
we are going just to show everything:&lt;/p>
&lt;pre>&lt;code>MATCH (n)-[r]-() RETURN n, r
&lt;/code>&lt;/pre>
&lt;p>And you will get this!&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/biz/neo4j_architecture/1.png" alt="Cypher MATCH #1">&lt;/p>
&lt;p>So, what&amp;rsquo;s the point of all this? Basically, that you can do queries that will
make the graph smaller for your needs. This example data that we have added is
quite small (just few nodes), in the real graph that I am working on we have
already few dozens. For example, imagine that you just want to see python
related information:&lt;/p>
&lt;pre>&lt;code>MATCH (a)-[r]-() WHERE a.name=&amp;quot;Python&amp;quot; RETURN a, r
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://agonzalezro.github.io/biz/neo4j_architecture/2.png" alt="Cypher MATCH #2">&lt;/p>
&lt;p>Or you just want to see the people that can work with the Server #1&lt;/p>
&lt;pre>&lt;code>MATCH (s:Service)-[r]-()-[r2:KNOWS]-(p:Person)
WHERE s.name=&amp;quot;Service #1&amp;quot; RETURN s, p
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://agonzalezro.github.io/biz/neo4j_architecture/3.png" alt="Cypher MATCH #2">&lt;/p>
&lt;h2 id="one-more-thing">One more thing&lt;/h2>
&lt;p>For now, this project in my company is just a POC and I have not really clear
what attributes and entities I should draw to make this graph useful for the
present and for the future. If you have previous experiences or you want to
start a brainstorming, write on the comments or &lt;a href="http://twitter.com/agonzalezro">find me at
twitter&lt;/a>.&lt;/p>
&lt;p>Also, for now I am happy with just creating some screenshots from the data that
Cypher is showing to me, but it would be really nice to find a more
professional way of sharing this graphs. Cypher renders them with D3, so, I
don&amp;rsquo;t fully understand why it doesn&amp;rsquo;t support exporting them in a easy way.
Again, if you know something, just let me know.&lt;/p></description></item><item><title>How to find a flat in London with some help</title><link>https://agonzalezro.github.io/posts/flats/</link><pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/flats/</guid><description>
&lt;p>&lt;strong>EDIT:&lt;/strong> I&amp;rsquo;ve added a little bit more of code to the gist to get the latitude
and longitude of the flat. This way the process of plotting them is more
accurate and incredibly easy. Thanks again &lt;a href="http://cartodb.com">CartoDB&lt;/a>!&lt;/p>
&lt;p>At the end of this month I am going to move with a friend. This movement is
going to be something like the 7th one since I am living here (little bit less
than 2 years).&lt;/p>
&lt;p>We are a little bit struggling trying to find a place so I decided that we need
a little bit of help:&lt;/p>
&lt;p>Do you know &lt;a href="http://gumtree.com">gumtree.com&lt;/a>? That page is extremely good for
renting if you just take care of the content (aka adverts that users upload)
but it&amp;rsquo;s extremely bad at searching: I couldn&amp;rsquo;t filter to know when the flat would be available and I would be able to move in! Seriously?&lt;/p>
&lt;p>To fix this I made a small scraper that is going to gather data from few pages
of the search results already filtered by gumtree, check the &lt;code>QUERY_PARAMS&lt;/code> on
the &lt;a href="https://gist.github.com/agonzalezro/440e7bf41e77c284d735">following gist&lt;/a>:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>In the other hand, the location needs to be a place close to King&amp;rsquo;s Cross and
close to Mile End. Calculate commute times from one address to another one
doesn&amp;rsquo;t look straightforward and easy to do, so, the best solution (in relation
dev_time/benefit) was showing all those flats in a map, and I made it thanks to
the help of CartoDB. This piece of software is amazing, basically the process
was:&lt;/p>
&lt;ol>
&lt;li>drag&amp;amp;drop the CSV to your CartoDB account.&lt;/li>
&lt;li>&lt;del>click on the dropdown of the &amp;ldquo;location&amp;rdquo; row and then on &amp;ldquo;Georeference&amp;rdquo;.&lt;/del>&lt;/li>
&lt;li>&lt;del>in the popup that will be shown to you, you must select &amp;ldquo;&amp;ldquo;You have one or
more columns with the address&amp;rdquo;, and after that you will have a georeferenced
list of points. The only bad point with this solution is that every month
you just have 100 geoferential queries available for free :(&lt;/del>&lt;/li>
&lt;/ol>
&lt;p>With that data you can create your own visualisation as I made here:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>If you want to say something about this post or you want to offer me a nice
flat in London, feel free of use the comments or find me in twitter:
&lt;a href="http://twitter.com/agonzalezro">@agonzalezro&lt;/a>&lt;/p></description></item><item><title>codereview from the POV of a noob</title><link>https://agonzalezro.github.io/posts/codereview/</link><pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/codereview/</guid><description>
&lt;p>Hi g(irl|uy)s! I would like to start with a disclaimer:&lt;/p>
&lt;p>&lt;em>I am not (and I don&amp;rsquo;t pretend to be) a craftmanship trooper (they like
to be called like that isn&amp;rsquo;t?), senior engineer with more years of
experience that the technology has, guru, blablabla&amp;hellip;&lt;/em>&lt;/p>
&lt;p>&lt;em>I just want to show my opinion about this process (which I really
like!). But more important that share my opinion, is to know what is
yours, so, please, comment!&lt;/em>&lt;/p>
&lt;p>Today we had an interesting conversation at work about how we make and
how we should make our codereviews. My point of view is that there are
three different things to check:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Code syntax.&lt;/strong> It&amp;rsquo;s a part that should be 100% automagically done.
I usually work with python and I let this work to
&lt;a href="http://pypi.python.org/pypi/flake8">Flake8&lt;/a> on vim, but it&amp;rsquo;s always
good to have a git hook.&lt;/li>
&lt;li>&lt;strong>Reusability and maintainability.&lt;/strong> I am afraid that this is the
worst part to check, it&amp;rsquo;s a manual process and it is really
subjective. Some people can think that use itertools with 2 lambda
functions is pretty clear and comprehensible, other people can think
that this code is the result of a dirty mind developer.&lt;/li>
&lt;li>&lt;strong>Functionality.&lt;/strong> Automated test! All the test that you can, and of
course, they worst the time that you will spent developing them.
There are things that can not be easily tested but in that case
let&amp;rsquo;s suppose that you were clever enough to test them manually and
in the case that is possible you can show it to anybody else (this
really helps!).&lt;/li>
&lt;/ol>
&lt;p>As I said the point 1 can be (and should be) automated! It&amp;rsquo;s really easy
to do, the same way that &lt;a href="http://pypi.python.org/pypi/flake8">Flake8&lt;/a>
exists for python, I am pretty sure that you will have one for your
favourite language. It&amp;rsquo;s really painful get back a pull request just for
some spaces that are not in place.&lt;/p>
&lt;p>For the point 3, yep, let me jump the second for now. Unit testing,
integration testing, functional testing&amp;hellip; whatever you want, but try to
automate it. This + a CI server will make your live really &amp;ldquo;easy&amp;rdquo;!&lt;/p>
&lt;p>And finally, about the second point. Each developer have their way to do
the things, but usually there are some points that can be fixed and
sometimes because we don&amp;rsquo;t know, other times just because we are lazy
but we post code like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(a, b, c):
&lt;span style="color:#66d9ef">if&lt;/span> (a &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>is_authenticated() &lt;span style="color:#f92672">and&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>has_perm(&lt;span style="color:#e6db74">&amp;#39;write&amp;#39;&lt;/span>)
):
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(json&lt;span style="color:#f92672">.&lt;/span>dumps(&lt;span style="color:#e6db74">&amp;#39;{authorized: True, &amp;#39;&lt;/span>a&lt;span style="color:#e6db74">&amp;#39;: a}))&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(json&lt;span style="color:#f92672">.&lt;/span>dumps(&lt;span style="color:#e6db74">&amp;#39;{authorized: True, &amp;#39;&lt;/span>a&lt;span style="color:#e6db74">&amp;#39;: a}))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is just an example, but you should agree with me that it&amp;rsquo;s really
easy to improve. This is what, in my opinion should be more checked in
the reviews.&lt;/p>
&lt;p>This was just an example (please, remember that :D), but could be
improved with something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">proper_function_name&lt;/span>(proper_variable_name):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;This is an amazing function that will do just a thing.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> :param proper_variable_name: what I am?
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> :returns: An HttpResponse object with the following JSON content:
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> {&amp;#39;authorized&amp;#39;: bool,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#39;proper_variable_name: int}
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
is_authorized &lt;span style="color:#f92672">=&lt;/span> (
request&lt;span style="color:#f92672">.&lt;/span>user &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>is_authenticated() &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>has_perm(&lt;span style="color:#e6db74">&amp;#39;write-resource&amp;#39;&lt;/span>)
)
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(
json&lt;span style="color:#f92672">.&lt;/span>dumps({
&lt;span style="color:#e6db74">&amp;#39;authorized&amp;#39;&lt;/span>: is_authorized,
&lt;span style="color:#e6db74">&amp;#39;proper_variable_name&amp;#39;&lt;/span>: proper_variable_name
})
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Those were the improvements (again, remember that it&amp;rsquo;s just an example):&lt;/p>
&lt;ol>
&lt;li>Give a proper name to the function. Don&amp;rsquo;t be afraid, everybody has
autocompletion! :D&lt;/li>
&lt;li>Give a proper name to the vars.&lt;/li>
&lt;li>DOCUMENT! In this example, ready for Sphinx.&lt;/li>
&lt;li>Simplify the if statements, actually, after take a look you made it
dissapear.&lt;/li>
&lt;li>One return.&lt;/li>
&lt;/ol>
&lt;p>So, what&amp;rsquo;s your opinion? What do you think that is more important in a
codereview.&lt;/p></description></item><item><title>backbone.js + underscore: small intro</title><link>https://agonzalezro.github.io/posts/backbone/</link><pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/backbone/</guid><description>
&lt;p>Today, &lt;a href="http://twitter.com/olegpidsadnyi/">Oleg&lt;/a> gave a talk about
backbone at &lt;a href="http://paylogic.nl/">Paylogic&lt;/a>. We were using it for a
really fancy application inside our backoffice, it was quite funny write
it and Oleg decided to share the knowledge.&lt;/p>
&lt;p>I used the techtalk to take some notes and, since this piece of code
will have no sense out of our backoffice, I&amp;rsquo;ve written a small example
that you can find as a &lt;a href="https://gist.github.com/3982819">gist&lt;/a> on my
github. I will use it to explain to you some of the useful things that
you can do with backbone and underscore. Feel free to improve it.&lt;/p>
&lt;p>This is only a introductory post, if you want advance stuff you should
go to the &lt;a href="http://backbonejs.org/">backbone official documentation&lt;/a> &amp;amp;
&lt;a href="http://underscorejs.org/">underscore docs&lt;/a>.&lt;/p>
&lt;h2 id="why">Why?&lt;/h2>
&lt;p>Backbone is really useful when you make complex GUIs on client side. You
can make your code like in a desktop app using events to handle the
actions. It&amp;rsquo;s not needed to pass around instances of parents views,
let&amp;rsquo;s use only the events for that purpose, and let the child decide.&lt;/p>
&lt;p>You have models too, that you can sync (or not) with the server.&lt;/p>
&lt;h2 id="models">Models&lt;/h2>
&lt;p>In backbone you can have local model and sync them with the server or
with local storage (not explained in this intro). In our example we
will:&lt;/p>
&lt;ol>
&lt;li>Create a collection to save our objects (type Item) in.&lt;/li>
&lt;li>Create the model Item.&lt;/li>
&lt;li>Create 2 object type Item inside this collection.&lt;/li>
&lt;li>Render them.&lt;/li>
&lt;/ol>
&lt;p>The 3 points can be made only with these lines of code. It&amp;rsquo;s really
simple! (after know how to do it :p):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>();
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Items&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">Collection&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>
});
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">items&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Items&lt;/span>();
&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>([{&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>}, {&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>}]);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: Setting values in the objects With .set will trigger the event
change. You can silent it in case that needed, but it&amp;rsquo;s really
useful, for example, to save it.&lt;/p>
&lt;p>&lt;strong>Second note&lt;/strong>: backbone is f***ing clever! Imagine, you are changing a
name, if the name has changed on the collection, the event will be raised,
if not, it will not. This means that if you are editing, but finally
you change your mind and you didn&amp;rsquo;t made any change, the event will
not be raised.&lt;/p>
&lt;h2 id="events">Events&lt;/h2>
&lt;p>They are really useful to remove dependencies between elements. For
example, with jQuery if you change a element from another, the first one
needs to know about the second. With backbone you can catch the event
with the child element and do whatever you want with it.&lt;/p>
&lt;p>On the example of my &lt;a href="https://gist.github.com/3982819">gist&lt;/a> I show an
alert box with the name of the element. But you could, for example,
change it to an editable input.&lt;/p>
&lt;p>This is the code of the example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">View&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
...
&lt;span style="color:#a6e22e">events&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;dblclick&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;onDoubleClick&amp;#34;&lt;/span>
},
...
&lt;span style="color:#a6e22e">onDoubleClick&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">$&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>(&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>).&lt;span style="color:#a6e22e">text&lt;/span>());
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hey! Why do you click on &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>); &lt;span style="color:#75715e">//Play with this :)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are binding the &lt;code>dblclick&lt;/code> event to the function &lt;code>onDoubleClick&lt;/code>.
This function will receive the event, and the event will have the target
(in this case the &lt;code>&amp;lt;li/&amp;gt;&lt;/code> that we are clicking.&lt;/p>
&lt;h2 id="underscore">Underscore&lt;/h2>
&lt;p>It&amp;rsquo;s really useful to Work with collections. In out example we are using
it to iterate over the items:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">each&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">models&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">itemview&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>);
&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">el&lt;/span>).&lt;span style="color:#a6e22e">append&lt;/span>(&lt;span style="color:#a6e22e">itemview&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>().&lt;span style="color:#a6e22e">el&lt;/span>);
}, &lt;span style="color:#66d9ef">this&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you read carefully this piece of code you will realize that we are
instantiating a new ItemView for each particular item, so it has its own
container element created on the fly, re-renderable each time when data
is updated and all events are delegated to this element.&lt;/p>
&lt;p>The amazing thing that you can do with underscore is use templates (yes,
like jinja or django-templates, but in JS)! And we are doing it:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">View&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
...
&lt;span style="color:#a6e22e">template&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">template&lt;/span>(&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#item-template&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">html&lt;/span>()),
...
&lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">el&lt;/span>).&lt;span style="color:#a6e22e">html&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">template&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">toJSON&lt;/span>()));
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
},
...
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/template&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item-template&amp;#34;&lt;/span>&amp;gt;
&lt;span style="color:#f92672">&amp;lt;%=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">%&amp;gt;&lt;/span>
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="extra-ball">Extra ball&lt;/h2>
&lt;p>Use &lt;code>_.debounce&lt;/code> to don&amp;rsquo;t call the functions thousands of times, example
drag&amp;amp;dropping an element it will be useful.&lt;/p>
&lt;p>For example in our project we had to sort with drag and drop some
elements of a list, instead send this event in each drag movement, we
made it after 200s being quiet with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">debounce&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">pools&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
}, &lt;span style="color:#ae81ff">200&lt;/span>),
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please comment your thoughts about the post. We are all here to learn,
and it&amp;rsquo;s really easy that I made some mistake explaining this.
Furhtermore, I know that my English is not really good, so, I will
apreciate constructive comments about it too :)&lt;/p>
&lt;p>Enjoy it!&lt;/p></description></item></channel></rss>