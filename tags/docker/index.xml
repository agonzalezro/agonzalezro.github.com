<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on // Álex Go{,5z}</title><link>https://agonzalezro.github.io/tags/docker/</link><description>Recent content in docker on // Álex Go{,5z}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://agonzalezro.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Closing 2016, a list of talks I gave</title><link>https://agonzalezro.github.io/posts/2016/</link><pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/2016/</guid><description>
&lt;figure class="left" >
&lt;img src="https://agonzalezro.github.io/rafa.jpg" alt="A cow" />
&lt;figcaption class="center" >Thanks @rais38 for the photo!&lt;/figcaption>
&lt;/figure>
&lt;p>We are almost at the end of January but I didn&amp;rsquo;t want to end the first month of the year without doing a small recap of the talks I gave last year.&lt;/p>
&lt;p>When I moved to Spain at the end of 2015 I said to myself that I didn&amp;rsquo;t want to forget the little English I knew so I needed to force myself to keep traveling outside of Spain and to do some public speaking. The public speaking bit is for two reason: keep forcing myself to speak English and&amp;hellip; to lose my fear about talking English in front of a bunch of people you don&amp;rsquo;t know about a tech that they probably know better than you.&lt;/p>
&lt;p>I could do it much better than I did, but I am happy with the results.&lt;/p>
&lt;h2 id="my-english-talks">My English talks&lt;/h2>
&lt;h3 id="custom-volume-plugins--kubeconhttpskubeconio">Custom Volume Plugins @ &lt;a href="https://kubecon.io">Kubecon&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=33VzHXuuRs4">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/custom-volume-plugins">slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>I prepared this talk a lot, but I was pretty nervous on stage I did a terrible job. Some people said that they learn a lot of new concepts, but they were just trying to be friendly :) Probably I underestimated the pressure behind a Kubecon talk and I will fix this in the future.&lt;/p>
&lt;h3 id="python-kubernetes-and-friends--pygrunnhttpwwwpygrunnorg">Python, Kubernetes and friends @ &lt;a href="http://www.pygrunn.org/">PyGrunn&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=0tsaMVoydDg">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/python-kubernetes-and-friends">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>I gave this in the best (IMHO, but I could be biased) Python conference in the Netherlands, it went pretty well, I knew the things I did pretty badly in my previous talk at Kubeconf and I tried to fix the problems. However, if you check the video and you can give me some advice, feel free.&lt;/p>
&lt;h3 id="from-pets-to-cattle-the-way-of-kubernetes">From pets to cattle, the way of Kubernetes&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=K_Kh4LMiiqQ">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/from-pets-to-cattle-the-way-of-kubernetes">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>This talk was in Spain, but since it was a big conference I gave it in English for non-Spanish speakers. I think the talk was ok, I got a 4 out 5 in their feedback tool, but it seems I didn&amp;rsquo;t attach the people because nobody asking anything at the end. Out of camera I got several questions tho.&lt;/p>
&lt;h2 id="and-the-spanish-ones">And the Spanish ones&lt;/h2>
&lt;p>All these talks were internal Jobandtalent talks for my ex-colleagues, I hope it helped them, they definitely helped me, it was a trusty environment and the questions were really interesting. You probably wouldn&amp;rsquo;t ask that much in a conference but it helps the speaker (in this case me) to improve.&lt;/p>
&lt;h3 id="go-101--jobandtalenthttpwwwjobandtalentcom">Go 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=zaywpuLV4BY">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/go-101-updated">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="kubernetes-101--jobandtalenthttpwwwjobandtalentcom">Kubernetes 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=5YmhMM_q4uI">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/kubernetes-101">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="docker-101--jobandtalenthttpwwwjobandtalentcom">Docker 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://speakerdeck.com/agonzalezro/docker-101">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>Out of that list I gave some other, for example, about &lt;a href="https://github.com/agonzalezro/goqui/blob/master/examples/neo4j_intro_slides.neo4j">Neo4J&lt;/a> and a workshop with my friend &lt;a href="https://twitter.com/ipedrazas">@ipedrazas&lt;/a> about Kubernetes &amp;amp; Docker, here, in Spain. Also, I started &lt;a href="https://meetup.com/mad-scalability">mad Scalability&lt;/a> and I am quite happy with about it!&lt;/p>
&lt;p>I will try to prepare some CFP in 2017, but as today I see it pretty difficult because of reasons :)&lt;/p>
&lt;p>As I said at the beginning of the post, one of the reasons why I tried to do public speaking is to improve at it, you if you have any advice &lt;a href="https://twitter.com/agonzalezro">share it with me&lt;/a> please!&lt;/p></description></item><item><title>Log your Docker containers from a container with packetbeat</title><link>https://agonzalezro.github.io/posts/packetbeat-docker/</link><pubDate>Mon, 17 Aug 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/packetbeat-docker/</guid><description>
&lt;p>&lt;a href="https://github.com/elastic/packetbeat">packetbeat&lt;/a> is one of the best
application performance management tools in the opensource community. It&amp;rsquo;s now
part of the &lt;a href="https://www.elastic.co/products/beats">beats&lt;/a> that Elastic provide
us to monitor our applications. What it does is analyze our data packets to
send some useful information to ElasticSearch.&lt;/p>
&lt;p>After the introduction you probably realize that we will need: ElasticSearch
installed and if you want to see something useful you will need Kibana as well.
There is a &lt;a href="https://www.elastic.co/guide/en/beats/packetbeat/current/packetbeat-getting-started.html">guide for getting
started&lt;/a>
that explains the process pretty clearly. The &amp;ldquo;problem&amp;rdquo; with that guide is that
you need to install everything in your machine, this blog post is a 101 to have
it quickly running into containers.&lt;/p>
&lt;p>As mentioned, we will need ES and Kibana:&lt;/p>
&lt;pre>&lt;code>docker run -d -p 9200:9200 -p 9300:9300 --name elasticsearch-pb elasticsearch
docker run -d -p 5601:5601 --name kibana-pb --link elasticsearch-pb:elasticsearch \
-e ELASTICSEARCH_URL=http://elasticsearch:9200 kibana
&lt;/code>&lt;/pre>
&lt;p>Now we have all the required things to run our packetbeat. There are few points
that I want to raise before doing so:&lt;/p>
&lt;ol>
&lt;li>packetbeat will be monitoring our network traffic, this means that our
container running packetbeat needs to have access to the host network.&lt;/li>
&lt;li>the last &lt;code>Dockerfile&lt;/code> I found regarding this was:
&lt;a href="https://github.com/packetbeat/packetbeat-docker">https://github.com/packetbeat/packetbeat-docker&lt;/a> by
&lt;a href="https://twitter.com/tudor_g">Tudor&lt;/a> (one of the original developers) but
it is a little bit old. So I made my own based on that (should PR but I
wonder why the previous was not updated yet, and it would be nice to run
something more actual than 0.5 but there are no binaries):&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;p>The previous docker image will require a file &lt;code>packetbeat.yml&lt;/code> to work after.
As a quick start you can use this one:
&lt;a href="https://github.com/elastic/packetbeat/blob/master/packetbeat.dev.yml">https://github.com/elastic/packetbeat/blob/master/packetbeat.dev.yml&lt;/a> but
probably you would like to change your device from &lt;code>en0&lt;/code> to &lt;code>docker0&lt;/code>.&lt;/p>
&lt;pre>&lt;code>docker build -t agonzalezro/packetbeat .
docker run --net=host agonzalezro/packetbeat
&lt;/code>&lt;/pre>
&lt;p>Cool, now you are ready to go! Everything that you do into your containers will
be show on Kibana, to test it go to you docker host port &lt;code>5601&lt;/code>, it will ask
for an index pattern, change the default &lt;code>logstash-*&lt;/code> to &lt;code>packetbeat-*&lt;/code> and
enjoy it!&lt;/p>
&lt;p>&lt;a href="https://agonzalezro.github.io/packetbeat/kibana.png">&lt;img src="https://agonzalezro.github.io/packetbeat/kibana-thumb.png" alt="kibana-screenshot">&lt;/a>&lt;/p>
&lt;p>If you have any comment, let me know here or in
&lt;a href="http://twitter.com/agonzalezro">twitter&lt;/a>. Also, if you are interested in
monitoring with packetbeat you should definitely take a look to &lt;a href="http://acalustra.com/how-can-i-monitor-my-voip-application.html">&amp;ldquo;Kamailio
monitoring with statsd, SIPCapture or
Packetbeat&amp;rdquo;&lt;/a>
by my friend &lt;a href="http://twitter.com/eloycoto">eloycoto&lt;/a> who introduced me to
packetbeat :a)&lt;/p></description></item><item><title>Docker workshop at Shopa</title><link>https://agonzalezro.github.io/posts/docker_shopa/</link><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/docker_shopa/</guid><description>
&lt;p>Today I gave a workshop at Shopa about Docker: what is it, why it&amp;rsquo;s useful for
us and why it can even be more useful.&lt;/p>
&lt;p>I understand that just the slides without any context can be a little bit
misleading, but in case that it helps somebody I will share them here:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The design of the PDF looks uglier than it really is, so if you want the html
slides you can always use the &lt;a href="https://github.com/agonzalezro/slides/blob/master/docker/Dockerfile">&lt;code>Dockerfile&lt;/code> provided with the source of the
slides&lt;/a> :)&lt;/p></description></item><item><title>How I prepared my Mac to make some Docker development</title><link>https://agonzalezro.github.io/posts/docker-env/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/docker-env/</guid><description>
&lt;p>This post is about &lt;strong>how I did it!&lt;/strong> not about a standard way or something like
that, if you use any other way I would be happy to hear it on the comments.&lt;/p>
&lt;p>I usually use &lt;code>boot2docker&lt;/code> on my machine to run container, but it looks like
it was misbehaving a little bit when I was trying to create the binary of my
dev branch with:&lt;/p>
&lt;pre>&lt;code>$ make binary
&lt;/code>&lt;/pre>
&lt;p>Actually, it was just not creating it.&lt;/p>
&lt;p>I could also create some cross-compiled binaries but that didn&amp;rsquo;t work either.
It was a really weird situation because I couldn&amp;rsquo;t find the path that it was
saying that it was creating. Not in my machine, not in my boot2docker VM
either. So, after some frustrating time I decided to go with vagrant.&lt;/p>
&lt;h2 id="what-i-wanted">What I wanted?&lt;/h2>
&lt;ul>
&lt;li>My vim! I couldn&amp;rsquo;t live without that.&lt;/li>
&lt;li>My ssh keys for github and similar without copying them to the vagrant box.&lt;/li>
&lt;/ul>
&lt;h2 id="how-i-did-it">How I did it?&lt;/h2>
&lt;h3 id="vagrant">vagrant&lt;/h3>
&lt;p>It was a simple process after you have clear what you really want to do:&lt;/p>
&lt;pre>&lt;code>$ cd myawesomebox
$ vagrant init # Edit the file if you want more memory or similar
$ git clone git@github.com:YOUR_USERNAME/docker
$ vagrant ssh
$ sudo su -
&lt;/code>&lt;/pre>
&lt;p>What we did there? We have created a &lt;code>Vagrantfile&lt;/code> and we clone the repo in the
same folder. Thanks to that when we are inside the vagrant box (with &lt;code>vagrant ssh&lt;/code>) we will be able to access to it on the path &lt;code>/vagrant&lt;/code> of your box.&lt;/p>
&lt;p>The advantage of this approach is that you can access to all the docker code
from your host machine in the path &lt;code>myawesomebox&lt;/code> so you will not need to copy
any key, any conf or anything like that.&lt;/p>
&lt;h3 id="docker">docker&lt;/h3>
&lt;p>Now it&amp;rsquo;s time to update your docker server and create your on docker client
(remember that we are logged in as root on that box):&lt;/p>
&lt;pre>&lt;code># cd /vagrant/docker
# make build&amp;amp;&amp;amp;make binary
# service docker stop
# cp bundles/1.3.2-dev/binary/docker-1.3.2-dev /usr/bin/docker
# service docker start
&lt;/code>&lt;/pre>
&lt;p>Where &lt;code>1.3.2&lt;/code> is the current version at the time of writing &amp;amp;
&lt;code>/usr/bin/docker&lt;/code> is your old docker server binary.&lt;/p>
&lt;p>Now you are running a new server, but where is the client?! Easy peasy, on the
same place that the server was originally:&lt;/p>
&lt;pre>&lt;code># bundles/1.3.2-dev/binary/docker
...
&lt;/code>&lt;/pre>
&lt;p>I usually alias it to the letter &lt;code>d&lt;/code> to access to it quicker without moving
stuff around:&lt;/p>
&lt;pre>&lt;code># alias d=&amp;quot;`pwd`/bundles/1.3.2-dev/binary/docker&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>I would say that develop some nice pull request? Or at least try! It&amp;rsquo;s fun
anyway :)&lt;/p>
&lt;p>I went through all this pain while &lt;a href="http://twitter.com/eloycoto">@eloycoto&lt;/a> &amp;amp;
me were developing a &lt;a href="https://github.com/docker/docker/pull/9415">small PR to show vertical &lt;code>ps&lt;/code>
outputs&lt;/a>, so, thanks mate!&lt;/p>
&lt;p>If you have any question or you think that my way of doing this stinks, please,
let me know! I would really, really appreciate it.&lt;/p></description></item><item><title>Dockerizing Pligg with Fig</title><link>https://agonzalezro.github.io/posts/pligg-docker/</link><pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/pligg-docker/</guid><description>
&lt;p>For a pet project I needed &lt;a href="http://pligg.com/">Pligg&lt;/a> which is kinda a social
network site in the style of the old-digg (with karma and this kind of things).&lt;/p>
&lt;p>Installing a LAMP system is kinda boring stuff, so, for that and for the sake
of learning I decided to go with &lt;a href="https://www.docker.com/">Docker&lt;/a> &amp;amp;
&lt;a href="http://www.fig.sh/">Fig&lt;/a>. Sadly or luckily, every time that I dockerize
something I find a lot of unexpected problems that slow me down, but&amp;hellip; you
always learn something!&lt;/p>
&lt;p>This post is to explain a little bit the process and the problems that I found
and how I solved them. It&amp;rsquo;s not a how to, it&amp;rsquo;s more a explanation of what I did
and perhaps you can provide a better solution on the comments.&lt;/p>
&lt;h2 id="what-do-i-need">What do I need?&lt;/h2>
&lt;p>The site is &amp;ldquo;simple&amp;rdquo; so the only required stuff will be a MySQL server and an
Apache2 server. You could run 2 Docker instances manually, or&amp;hellip; use the magic
provided by Fig. This is the &lt;code>fig.yml&lt;/code> file that explains my service:&lt;/p>
&lt;pre>&lt;code>web:
build: .
links:
- db
volumes:
- /var/log:/var/www/logs
ports:
- &amp;quot;80:80&amp;quot;
environment:
- MYSQL_PASSWORD
- MY_BASE_URL
db:
image: mysql
volumes:
- /var/lib/mysql:/var/lib/mysql
environment:
- MYSQL_DATABASE=dbpligg
- MYSQL_USER=pligguser
- MYSQL_ROOT_PASSWORD
- MYSQL_PASSWORD
ports:
- &amp;quot;3306:3306&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Basically I am saying that I will have 2 servers: &amp;ldquo;web&amp;rdquo; &amp;amp; &amp;ldquo;db&amp;rdquo; and specifying
their volumes, environment variables and exported ports.&lt;/p>
&lt;h3 id="problem">Problem?&lt;/h3>
&lt;p>First thing that we see here: &lt;code>MY_BASE_URL&lt;/code> &amp;amp; &lt;code>MYSQL_{,ROOT_}PASSWORD&lt;/code> don&amp;rsquo;t
have any value, this is because Fig is going to got those values from the
current Docker host. I need them for specified some settings file that
originally were written in a normal file (difficult to change while deploying).&lt;/p>
&lt;p>Also, &lt;code>MY_BASE_URL&lt;/code> is a small/ugly trick. It seems that Pligg requires to know
the host were it&amp;rsquo;s running to serve static assets as CSS or JS.&lt;/p>
&lt;p>If you take a look to &lt;a href="https://github.com/agonzalezro/docker-pligg/tree/master/config">my repo &lt;code>config&lt;/code>
folder&lt;/a> you
will see the slightly modified versions of two configuration files for Pligg
that are making use of this environment variables.&lt;/p>
&lt;h3 id="more-problems">More problems?&lt;/h3>
&lt;p>For running Pligg we need a minimal DB structure I&amp;rsquo;ve found 2 different ways of
creating this data in my data container, but none of them are optimal for me,
mainly because they require an extra step:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I&amp;rsquo;ve created minimal SQL dump with some default values and on the &lt;code>README.md&lt;/code>
provide a quick way of ingest this data using the same container:&lt;/p>
&lt;pre>&lt;code> $ docker exec dockerpligg_db_1 \
mysql -u pligguser -p$MYSQL_PASSWORD dbpligg &amp;lt; &amp;quot;`cat pligg.sql`&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Another way is going through all the installation process accessing to
&lt;a href="http://example.com/install">http://example.com/install&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I think that perhaps creating a script that checks is the DB if empty and if it
is it uses the SQL to dump the DB back would be an option, but seems kinda
dangerous to automate that process in a live environment (anybody said delete
data by a mistaken dump?).&lt;/p>
&lt;p>&lt;a href="http://acalustra.com/">@eloycoto&lt;/a> has recommended me to use inheritance of
containers. But I am not happy with that solution either: I would need two
&lt;code>Dockerfile&lt;/code>s and possibly two &lt;code>fig.yml&lt;/code> files as well or add some weird magic
to replace one container with the other after the installation.&lt;/p>
&lt;h3 id="third-thing-that-i-dont-really-like">Third thing that I don&amp;rsquo;t really like&lt;/h3>
&lt;p>After the first time that you run the installation you need to manually remove
the install path (this seems quite common in PHP apps?). I am doing that
running a &lt;code>docker exec&lt;/code> to that container, but I would prefer to manually
remove it with the &lt;code>Dockerfile&lt;/code>. Why I don&amp;rsquo;t do so? Because if I remove that
folder I am forcing all the users of my configuration to use the dump SQL
method explained above and I don&amp;rsquo;t give them any change.&lt;/p>
&lt;h2 id="so">So&amp;hellip;&lt;/h2>
&lt;p>I suspect that it&amp;rsquo;s normal to have that kind of problems trying to &amp;ldquo;migrate&amp;rdquo; an
application that was never used before in a Docker container.&lt;/p>
&lt;p>To be honest with Pligg, the only changes that I required were minimal, but I
don&amp;rsquo;t know if that &amp;ldquo;install&amp;rdquo; part could be just removed with my own settings
file, I tried that and it was asking me to repeat values that were already set
in the &lt;code>settings.php&lt;/code>.&lt;/p>
&lt;p>I am not happy with the dump/install solution that I&amp;rsquo;ve found, but it works™!&lt;/p>
&lt;p>I am sure that if you were using Docker or Fig before you will have plenty of
complaints about my article, let me know leaving a comment or just &lt;a href="http://twitter.com/agonzalezro">tweet me
something&lt;/a>.&lt;/p></description></item></channel></rss>