<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>elixir on // Álex Go{,5z}</title><link>https://agonzalezro.github.io/tags/elixir/</link><description>Recent content in elixir on // Álex Go{,5z}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 16 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://agonzalezro.github.io/tags/elixir/index.xml" rel="self" type="application/rss+xml"/><item><title>Scheduling Your Kubernetes Pods With Elixir</title><link>https://agonzalezro.github.io/posts/elixir-scheduler/</link><pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/elixir-scheduler/</guid><description>
&lt;blockquote>
&lt;p>This was originally posted on &lt;a href="https://deis.com/blog/2016/scheduling-your-kubernetes-pods-with-elixir/">deis.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://twitter.com/kelseyhightower">Kelsey Hightower&lt;/a> gave a really interesting talk at &lt;a href="https://skillsmatter.com/conferences/7208-containersched-2015">ContainerSched&lt;/a> about how to create your own scheduler using the Kubernetes HTTP API.&lt;/p>
&lt;p>The talk was awesome. It&amp;rsquo;s incredible to see what kind of things you can do with a base system as good as Kubernetes.&lt;/p>
&lt;p>However, I missed one thing. The &lt;a href="https://github.com/kelseyhightower/scheduler">example&lt;/a> provided by Kelsey was a Go application. Which is the main language used with Kubernetes. So, if you look at that code without any context, you might think it&amp;rsquo;s using some kind of Kubernetes internal packages. But it&amp;rsquo;s not! It&amp;rsquo;s a standalone piece of code that happens to make some HTTP calls.&lt;/p>
&lt;p>To illustrate this point, I decided to write my own scheduler, in a different language. In my case, &lt;a href="http://elixir-lang.org/">Elixir&lt;/a>, because that&amp;rsquo;s the language I happen to be learning at the moment.&lt;/p>
&lt;p>This post isn&amp;rsquo;t an intro to Elixir, but the code should be easy to follow.&lt;/p>
&lt;p>Also, I&amp;rsquo;m going to use &lt;code>localhost&lt;/code> when accessing the Kubernetes API. Why? For simplicity. If we run &lt;code>kubectl proxy&lt;/code> on a computer connected to the Kubernetes master, we will not need to deal with authorization, hosts, and so on. The &lt;code>proxy&lt;/code> command will do it for us.&lt;/p>
&lt;p>So, let&amp;rsquo;s dive in.&lt;/p>
&lt;h2 id="get-a-list-of-unscheduled-jobs">Get a List of Unscheduled Jobs&lt;/h2>
&lt;p>To start off with, we need a pod for our scheduler to schedule.&lt;/p>
&lt;p>By default, Kubernetes will schedule all your pods. So, we need to create a unscheduled pod and we need to indicate to Kubernetes that we don&amp;rsquo;t want our pod to get scheduled.&lt;/p>
&lt;p>So, create a file called &lt;code>pod.yml&lt;/code> and put this inside:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">custom&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">scheduler.alpha.kubernetes.io/name&lt;/span>: &lt;span style="color:#ae81ff">myOwnScheduler&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx&amp;#34;&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx:1.10.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the &lt;code>scheduler.alpha.kubernetes.io/name&lt;/code> annotation we use to specify that our scheduler (that we call &lt;code>myOwnScheduler&lt;/code>) will be handling this pod.&lt;/p>
&lt;p>Now, let&amp;rsquo;s create the pod from the definition file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f pod.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After you&amp;rsquo;ve done this, there will be an unscheduled job waiting for us inside Kubernetes. Why unscheduled? Because our pod says it wants to be scheduled by the &lt;code>myOwnScheduler&lt;/code> scheduler, but we&amp;rsquo;ve not created it yet, so Kubernetes can&amp;rsquo;t schedule it.&lt;/p>
&lt;p>So, let&amp;rsquo;s build our scheduler.&lt;/p>
&lt;p>First, our scheduler must be able to grab this unscheduled job from the API.&lt;/p>
&lt;p>Here&amp;rsquo;s the function I wrote to do that:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> unscheduled_pods &lt;span style="color:#66d9ef">do&lt;/span>
is_managed_by_us &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>(get_in(&amp;amp;1, [&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;annotations&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;scheduler.alpha.kubernetes.io/name&amp;#34;&lt;/span>]) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">@name&lt;/span>)
resp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HTTPoison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get! &lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:8001/api/v1/pods?fieldSelector=spec.nodeName=&amp;#34;&lt;/span>
resp&lt;span style="color:#f92672">.&lt;/span>body
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Poison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>decode!
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> get_in([&lt;span style="color:#e6db74">&amp;#34;items&amp;#34;&lt;/span>])
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>filter(is_managed_by_us)
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>map(&lt;span style="color:#f92672">&amp;amp;&lt;/span>(get_in(&amp;amp;1, [&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>])))
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see we are using &lt;code>127.0.0.1&lt;/code> to query our API, this is posible thanks to the &lt;code>kubectl proxy&lt;/code> command we mentioned in the intro.&lt;/p>
&lt;p>This code grabs the name of all the pods that are waiting to be scheduled inside Kubernetes. It then uses the &lt;code>is_managed_by_us&lt;/code> function to see whether the &lt;code>@name&lt;/code> attribute is set to &lt;code>myOwnScheduler&lt;/code>. If this is true, the pod has indicated that it should be managed by our scheduler.&lt;/p>
&lt;h2 id="an-elixir-introduction">An Elixir Introduction&lt;/h2>
&lt;p>I said I wouldn&amp;rsquo;t explain Elixir, but I will just comment on three piece of syntax.&lt;/p>
&lt;p>The &lt;code>|&amp;gt;&lt;/code> in the code above is a pipe, like the &lt;code>|&lt;/code> character from a shell script. Using this passes the result from the left side as a parameter to the function on the right side. In this way return values can be piped through functions.&lt;/p>
&lt;p>The &lt;code>&amp;amp;&lt;/code> character marks an &lt;a href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous function&lt;/a>, i.e. a function that we define inline as an expression. And &lt;code>&amp;amp;1&lt;/code> refers the first parameter received by the function.&lt;/p>
&lt;p>We can also use an anonymous function as parameter to another function. As we are doing, in the &lt;code>map&lt;/code> call.&lt;/p>
&lt;h2 id="get-a-list-of-available-nodes">Get a List of Available Nodes&lt;/h2>
&lt;p>Our &lt;code>unscheduled_pods&lt;/code> function gets us a list of pods that have not been scheduled yet. So next up, we can bind them to our nodes. That is, we tell our containers to run on particular nodes.&lt;/p>
&lt;p>But wait, how do we know what nodes are available?&lt;/p>
&lt;p>We&amp;rsquo;ll need to grab those as well, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> nodes &lt;span style="color:#66d9ef">do&lt;/span>
resp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HTTPoison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get! &lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:8001/api/v1/nodes&amp;#34;&lt;/span>
resp&lt;span style="color:#f92672">.&lt;/span>body
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Poison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>decode!
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> get_in([&lt;span style="color:#e6db74">&amp;#34;items&amp;#34;&lt;/span>])
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>map(&lt;span style="color:#f92672">&amp;amp;&lt;/span>(get_in(&amp;amp;1, [&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>])))
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will return a list of all nodes.&lt;/p>
&lt;p>We could potentially request a lot more information from the API at this point, but for what we&amp;rsquo;re building, it&amp;rsquo;s not necessary. If you want to now what extra information is available, &lt;a href="http://kubernetes.io/kubernetes/third_party/swagger-ui/#!/api%2Fv1/listNamespacedNode">check the documentation for this endpoint&lt;/a>.&lt;/p>
&lt;h2 id="the-bind-function">The Bind Function&lt;/h2>
&lt;p>So let&amp;rsquo;s review.&lt;/p>
&lt;p>We have a list of all the unscheduled jobs that we are supposed to manage. And we have a list of all the nodes we can schedule jobs to.&lt;/p>
&lt;p>But how do we actually schedule a pods on a node?&lt;/p>
&lt;p>We call the bind endpoint, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> bind(pod_name, node_name) &lt;span style="color:#66d9ef">do&lt;/span>
url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:8001/api/v1/namespaces/default/pods/&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pod&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/binding&amp;#34;&lt;/span>
payload &lt;span style="color:#f92672">=&lt;/span> %{
&lt;span style="color:#e6db74">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;v1&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Binding&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>: %{
&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: pod_name,
},
&lt;span style="color:#e6db74">&amp;#34;target&amp;#34;&lt;/span>: %{
&lt;span style="color:#e6db74">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;v1&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Node&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: node_name,
}
}
headers &lt;span style="color:#f92672">=&lt;/span> [{&lt;span style="color:#e6db74">&amp;#39;content-type&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}]
&lt;span style="color:#a6e22e">HTTPoison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>post! url, payload &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Poison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode!, headers
&lt;span style="color:#a6e22e">IO&lt;/span>&lt;span style="color:#f92672">.&lt;/span>puts &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pod_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> pod scheduled in &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>node_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But before we can use this function, we need a scheduling strategy.&lt;/p>
&lt;h2 id="scheduling-strategy">Scheduling Strategy&lt;/h2>
&lt;p>For our simple scheduler, we will go with a random scheduling strategy.&lt;/p>
&lt;p>In effect, we schedule each pod on a random node. Multiple pods might even end up on the same node.&lt;/p>
&lt;p>Here&amp;rsquo;s how we do that:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> schedule(pods) &lt;span style="color:#66d9ef">do&lt;/span>
pods
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>each(&lt;span style="color:#f92672">&amp;amp;&lt;/span>(bind(&amp;amp;1, &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>random(nodes))))
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, this is very basic, and there are much better ways to maximise the resources we have available to us. But we&amp;rsquo;re building this as a learning exercise. Feel free to extend this code if you want to take things further.&lt;/p>
&lt;p>Some ideas to get you going:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round-robin&lt;/a> pod scheduling.&lt;/li>
&lt;li>Implement your own version of Kubernete&amp;rsquo;s load-aware scheduling.&lt;/li>
&lt;li>Annotate the pods with some extra information, for example: cluster.type: raspberry if you want to send them to the Raspberry Pi nodes in your cluster.&lt;/li>
&lt;li>You could use some external source of truth, e.g. Nagios, to determine which nodes to schedule jobs on.&lt;/li>
&lt;/ul>
&lt;h2 id="putting-everything-together">Putting Everything Together&lt;/h2>
&lt;p>Now we have everything in place, a &lt;code>main&lt;/code> function is all that&amp;rsquo;s needed:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> main(_args) &lt;span style="color:#66d9ef">do&lt;/span>
unscheduled_pods
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> schedule
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you are able to run your program!&lt;/p>
&lt;p>A simple &lt;code>elixir your_script.exs&lt;/code> should do it, if you have all the dependencies. But you probably don&amp;rsquo;t, so I recommend you follow the Usage section in &lt;a href="https://github.com/agonzalezro/escheduler#usage">the README&lt;/a> for the code that accompanies this post.&lt;/p>
&lt;h2 id="wrap-up">Wrap Up&lt;/h2>
&lt;p>For a most things, you probably don&amp;rsquo;t want to write your own scheduler. The one provided by Kubernetes is good for so many things.&lt;/p>
&lt;p>But if you want to do something the default Kubernetes scheduler can&amp;rsquo;t do, it&amp;rsquo;s not as difficult as you might think to write your own and slot it in, and continue to take advantage of everything Kubernetes has to offer.&lt;/p>
&lt;p>I&amp;rsquo;ve put my code up for &lt;a href="https://github.com/agonzalezro/escheduler">my Elixir scheduler&lt;/a>, on GitHub in case you want to check it out. This repository has everything you need to follow along with this post, from the YAML pod definition to the scheduler itself.&lt;/p></description></item></channel></rss>